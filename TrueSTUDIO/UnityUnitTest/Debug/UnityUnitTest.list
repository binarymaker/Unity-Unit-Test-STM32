
UnityUnitTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002004  08002004  00012004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080020f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  20000068  0800215c  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000010c  0800215c  0002010c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   000030b2  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a80e  00000000  00000000  00023142  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a3d  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000520  00000000  00000000  0002f390  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000728  00000000  00000000  0002f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002614  00000000  00000000  0002ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001e74  00000000  00000000  000325ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034460  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000013f4  00000000  00000000  000344dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fec 	.word	0x08001fec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08001fec 	.word	0x08001fec

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490e      	ldr	r1, [pc, #56]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0b      	ldr	r4, [pc, #44]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000272:	f000 f947 	bl	8000504 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 ff51 	bl	800111c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f000 f885 	bl	8000388 <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800028c:	080020f4 	.word	0x080020f4
  ldr r2, =_sbss
 8000290:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000294:	2000010c 	.word	0x2000010c

08000298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC1_IRQHandler>

0800029a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 800029a:	b570      	push	{r4, r5, r6, lr}
 800029c:	000e      	movs	r6, r1
 800029e:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a0:	000c      	movs	r4, r1
 80002a2:	1ba3      	subs	r3, r4, r6
 80002a4:	429d      	cmp	r5, r3
 80002a6:	dc01      	bgt.n	80002ac <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80002a8:	0028      	movs	r0, r5
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80002ac:	e000      	b.n	80002b0 <_read+0x16>
 80002ae:	bf00      	nop
 80002b0:	7020      	strb	r0, [r4, #0]
 80002b2:	3401      	adds	r4, #1
 80002b4:	e7f5      	b.n	80002a2 <_read+0x8>

080002b6 <_write>:

int _write(int file, char *ptr, int len)
{
 80002b6:	b570      	push	{r4, r5, r6, lr}
 80002b8:	000e      	movs	r6, r1
 80002ba:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002bc:	000c      	movs	r4, r1
 80002be:	1ba3      	subs	r3, r4, r6
 80002c0:	429d      	cmp	r5, r3
 80002c2:	dc01      	bgt.n	80002c8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80002c4:	0028      	movs	r0, r5
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80002c8:	7820      	ldrb	r0, [r4, #0]
 80002ca:	f000 f829 	bl	8000320 <__io_putchar>
 80002ce:	3401      	adds	r4, #1
 80002d0:	e7f5      	b.n	80002be <_write+0x8>
	...

080002d4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <_sbrk+0x2c>)
{
 80002d6:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80002d8:	6819      	ldr	r1, [r3, #0]
{
 80002da:	0002      	movs	r2, r0
	if (heap_end == 0)
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <_sbrk+0x10>
		heap_end = &end;
 80002e0:	4908      	ldr	r1, [pc, #32]	; (8000304 <_sbrk+0x30>)
 80002e2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80002e4:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80002e6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80002e8:	1882      	adds	r2, r0, r2
 80002ea:	428a      	cmp	r2, r1
 80002ec:	d906      	bls.n	80002fc <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80002ee:	f000 ff0f 	bl	8001110 <__errno>
 80002f2:	230c      	movs	r3, #12
 80002f4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80002f6:	2001      	movs	r0, #1
 80002f8:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80002fa:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80002fc:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80002fe:	e7fc      	b.n	80002fa <_sbrk+0x26>
 8000300:	20000084 	.word	0x20000084
 8000304:	2000010c 	.word	0x2000010c

08000308 <_close>:

int _close(int file)
{
	return -1;
}
 8000308:	2001      	movs	r0, #1
 800030a:	4240      	negs	r0, r0
 800030c:	4770      	bx	lr

0800030e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	019b      	lsls	r3, r3, #6
	return 0;
}
 8000312:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000314:	604b      	str	r3, [r1, #4]
}
 8000316:	4770      	bx	lr

08000318 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000318:	2001      	movs	r0, #1
 800031a:	4770      	bx	lr

0800031c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800031c:	2000      	movs	r0, #0
 800031e:	4770      	bx	lr

08000320 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000320:	b507      	push	{r0, r1, r2, lr}
    /* Place your implementation of fputc here */
    /* e.g. write a character to the LCD */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <__io_putchar+0x14>)
{
 8000324:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000326:	2201      	movs	r2, #1
 8000328:	a901      	add	r1, sp, #4
 800032a:	4803      	ldr	r0, [pc, #12]	; (8000338 <__io_putchar+0x18>)
 800032c:	f000 fe8a 	bl	8001044 <HAL_UART_Transmit>
    return ch;
}
 8000330:	9801      	ldr	r0, [sp, #4]
 8000332:	bd0e      	pop	{r1, r2, r3, pc}
 8000334:	0000ffff 	.word	0x0000ffff
 8000338:	20000094 	.word	0x20000094

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	2610      	movs	r6, #16
{
 8000340:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	2230      	movs	r2, #48	; 0x30
 8000344:	2100      	movs	r1, #0
 8000346:	a804      	add	r0, sp, #16
 8000348:	f000 ff15 	bl	8001176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	0032      	movs	r2, r6
 800034e:	2100      	movs	r1, #0
 8000350:	4668      	mov	r0, sp
 8000352:	f000 ff10 	bl	8001176 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000356:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800035c:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000360:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f000 fa3b 	bl	80007e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	2307      	movs	r3, #7
 8000370:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000374:	0029      	movs	r1, r5
 8000376:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800037e:	f000 fc45 	bl	8000c0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000382:	b010      	add	sp, #64	; 0x40
 8000384:	bd70      	pop	{r4, r5, r6, pc}
	...

08000388 <main>:
{
 8000388:	b530      	push	{r4, r5, lr}
 800038a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800038c:	f000 f8fc 	bl	8000588 <HAL_Init>
  SystemClock_Config();
 8000390:	f7ff ffd4 	bl	800033c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	2214      	movs	r2, #20
 8000396:	2100      	movs	r1, #0
 8000398:	a803      	add	r0, sp, #12
 800039a:	f000 feec 	bl	8001176 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039e:	2080      	movs	r0, #128	; 0x80
 80003a0:	4b2a      	ldr	r3, [pc, #168]	; (800044c <main+0xc4>)
 80003a2:	0300      	lsls	r0, r0, #12
 80003a4:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a8:	4301      	orrs	r1, r0
 80003aa:	6159      	str	r1, [r3, #20]
 80003ac:	695a      	ldr	r2, [r3, #20]
    HAL_Delay(1000);
 80003ae:	25fa      	movs	r5, #250	; 0xfa
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b2:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b8:	6959      	ldr	r1, [r3, #20]
 80003ba:	03c0      	lsls	r0, r0, #15
 80003bc:	4301      	orrs	r1, r0
 80003be:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003c8:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ca:	9201      	str	r2, [sp, #4]
 80003cc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ce:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d0:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	430a      	orrs	r2, r1
 80003d4:	615a      	str	r2, [r3, #20]
 80003d6:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	400b      	ands	r3, r1
 80003dc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003de:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e2:	f000 f9f9 	bl	80007d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	019b      	lsls	r3, r3, #6
 80003ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <main+0xc8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ee:	a903      	add	r1, sp, #12
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <main+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f6:	f000 f93f 	bl	8000678 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fa:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003fc:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fe:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000400:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	3b1f      	subs	r3, #31
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000404:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800040c:	f000 f934 	bl	8000678 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000410:	4811      	ldr	r0, [pc, #68]	; (8000458 <main+0xd0>)
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <main+0xd4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000414:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8000416:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000418:	2396      	movs	r3, #150	; 0x96
 800041a:	019b      	lsls	r3, r3, #6
 800041c:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800041e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000420:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000422:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000424:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800042e:	f000 fd9b 	bl	8000f68 <HAL_UART_Init>
    HAL_Delay(1000);
 8000432:	00ad      	lsls	r5, r5, #2
    printf("Hello printf %d\n\r",num);
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <main+0xd8>)
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <main+0xdc>)
 8000438:	6821      	ldr	r1, [r4, #0]
 800043a:	f000 fea5 	bl	8001188 <iprintf>
    num++;
 800043e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(1000);
 8000440:	0028      	movs	r0, r5
    num++;
 8000442:	3301      	adds	r3, #1
 8000444:	6023      	str	r3, [r4, #0]
    HAL_Delay(1000);
 8000446:	f000 f8bd 	bl	80005c4 <HAL_Delay>
 800044a:	e7f3      	b.n	8000434 <main+0xac>
 800044c:	40021000 	.word	0x40021000
 8000450:	10210000 	.word	0x10210000
 8000454:	48000800 	.word	0x48000800
 8000458:	20000094 	.word	0x20000094
 800045c:	40004400 	.word	0x40004400
 8000460:	20000090 	.word	0x20000090
 8000464:	08002024 	.word	0x08002024

08000468 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000468:	2001      	movs	r0, #1
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x2c>)
{
 800046c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	6999      	ldr	r1, [r3, #24]
 8000470:	4301      	orrs	r1, r0
 8000472:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000474:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000478:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4002      	ands	r2, r0
 800047c:	9200      	str	r2, [sp, #0]
 800047e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	430a      	orrs	r2, r1
 8000484:	61da      	str	r2, [r3, #28]
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	400b      	ands	r3, r1
 800048a:	9301      	str	r3, [sp, #4]
 800048c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	b002      	add	sp, #8
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b510      	push	{r4, lr}
 800049a:	0004      	movs	r4, r0
 800049c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	2214      	movs	r2, #20
 80004a0:	2100      	movs	r1, #0
 80004a2:	a803      	add	r0, sp, #12
 80004a4:	f000 fe67 	bl	8001176 <memset>
  if(huart->Instance==USART2)
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <HAL_UART_MspInit+0x54>)
 80004aa:	6822      	ldr	r2, [r4, #0]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d11b      	bne.n	80004e8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_UART_MspInit+0x58>)
 80004b4:	0292      	lsls	r2, r2, #10
 80004b6:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ba:	4311      	orrs	r1, r2
 80004bc:	61d9      	str	r1, [r3, #28]
 80004be:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c2:	4011      	ands	r1, r2
 80004c4:	9101      	str	r1, [sp, #4]
 80004c6:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	6959      	ldr	r1, [r3, #20]
 80004ca:	4311      	orrs	r1, r2
 80004cc:	6159      	str	r1, [r3, #20]
 80004ce:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	401a      	ands	r2, r3
 80004d4:	9202      	str	r2, [sp, #8]
 80004d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004d8:	230c      	movs	r3, #12
 80004da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	3b0a      	subs	r3, #10
 80004de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004e0:	3b01      	subs	r3, #1
 80004e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f000 f8c8 	bl	8000678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004e8:	b008      	add	sp, #32
 80004ea:	bd10      	pop	{r4, pc}
 80004ec:	40004400 	.word	0x40004400
 80004f0:	40021000 	.word	0x40021000

080004f4 <NMI_Handler>:
 80004f4:	4770      	bx	lr

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	e7fe      	b.n	80004f6 <HardFault_Handler>

080004f8 <SVC_Handler>:
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	4770      	bx	lr

080004fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fe:	f000 f853 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000502:	bd10      	pop	{r4, pc}

08000504 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000504:	2101      	movs	r1, #1
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	430a      	orrs	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	4002      	ands	r2, r0
 8000514:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	480e      	ldr	r0, [pc, #56]	; (8000554 <SystemInit+0x50>)
 800051a:	4002      	ands	r2, r0
 800051c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <SystemInit+0x54>)
 8000522:	4002      	ands	r2, r0
 8000524:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <SystemInit+0x58>)
 800052a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800052c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800052e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000532:	4382      	bics	r2, r0
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <SystemInit+0x5c>)
 800053a:	4002      	ands	r2, r0
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800053e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000540:	438a      	bics	r2, r1
 8000542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]

}
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000
 8000550:	08ffb80c 	.word	0x08ffb80c
 8000554:	fef6ffff 	.word	0xfef6ffff
 8000558:	fffbffff 	.word	0xfffbffff
 800055c:	ffc0ffff 	.word	0xffc0ffff
 8000560:	fffffeec 	.word	0xfffffeec

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b510      	push	{r4, lr}
 8000566:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000568:	f000 fbe6 	bl	8000d38 <HAL_RCC_GetHCLKFreq>
 800056c:	21fa      	movs	r1, #250	; 0xfa
 800056e:	0089      	lsls	r1, r1, #2
 8000570:	f7ff fdde 	bl	8000130 <__udivsi3>
 8000574:	f000 f866 	bl	8000644 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000578:	2001      	movs	r0, #1
 800057a:	2200      	movs	r2, #0
 800057c:	0021      	movs	r1, r4
 800057e:	4240      	negs	r0, r0
 8000580:	f000 f830 	bl	80005e4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000584:	2000      	movs	r0, #0
 8000586:	bd10      	pop	{r4, pc}

08000588 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	2310      	movs	r3, #16
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_Init+0x1c>)
{
 800058c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000590:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000596:	f7ff ffe5 	bl	8000564 <HAL_InitTick>
  HAL_MspInit();
 800059a:	f7ff ff65 	bl	8000468 <HAL_MspInit>
}
 800059e:	2000      	movs	r0, #0
 80005a0:	bd10      	pop	{r4, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40022000 	.word	0x40022000

080005a8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005a8:	4a02      	ldr	r2, [pc, #8]	; (80005b4 <HAL_IncTick+0xc>)
 80005aa:	6813      	ldr	r3, [r2, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	20000104 	.word	0x20000104

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000104 	.word	0x20000104

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005c6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff6 	bl	80005b8 <HAL_GetTick>
  uint32_t wait = Delay;
 80005cc:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ce:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80005d0:	1c63      	adds	r3, r4, #1
 80005d2:	1e5a      	subs	r2, r3, #1
 80005d4:	4193      	sbcs	r3, r2
 80005d6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	1b40      	subs	r0, r0, r5
 80005de:	42a0      	cmp	r0, r4
 80005e0:	d3fa      	bcc.n	80005d8 <HAL_Delay+0x14>
  {
  }
}
 80005e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080005e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005e8:	2800      	cmp	r0, #0
 80005ea:	da14      	bge.n	8000616 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ec:	230f      	movs	r3, #15
 80005ee:	b2c0      	uxtb	r0, r0
 80005f0:	4003      	ands	r3, r0
 80005f2:	3b08      	subs	r3, #8
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <HAL_NVIC_SetPriority+0x58>)
 80005f6:	089b      	lsrs	r3, r3, #2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	2203      	movs	r2, #3
 80005fe:	4010      	ands	r0, r2
 8000600:	4090      	lsls	r0, r2
 8000602:	32fc      	adds	r2, #252	; 0xfc
 8000604:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000606:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000608:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800060a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800060c:	69dc      	ldr	r4, [r3, #28]
 800060e:	43ac      	bics	r4, r5
 8000610:	4321      	orrs	r1, r4
 8000612:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000614:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000616:	2503      	movs	r5, #3
 8000618:	0883      	lsrs	r3, r0, #2
 800061a:	4028      	ands	r0, r5
 800061c:	40a8      	lsls	r0, r5
 800061e:	35fc      	adds	r5, #252	; 0xfc
 8000620:	002e      	movs	r6, r5
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_NVIC_SetPriority+0x5c>)
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	189b      	adds	r3, r3, r2
 8000628:	22c0      	movs	r2, #192	; 0xc0
 800062a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800062c:	4029      	ands	r1, r5
 800062e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	589c      	ldr	r4, [r3, r2]
 8000634:	43b4      	bics	r4, r6
 8000636:	4321      	orrs	r1, r4
 8000638:	5099      	str	r1, [r3, r2]
 800063a:	e7eb      	b.n	8000614 <HAL_NVIC_SetPriority+0x30>
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <HAL_SYSTICK_Config+0x28>)
 8000646:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000648:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800064a:	4293      	cmp	r3, r2
 800064c:	d80d      	bhi.n	800066a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800064e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000656:	6a03      	ldr	r3, [r0, #32]
 8000658:	0609      	lsls	r1, r1, #24
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	430b      	orrs	r3, r1
 8000660:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000662:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000664:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000668:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800066a:	4770      	bx	lr
 800066c:	00ffffff 	.word	0x00ffffff
 8000670:	e000e010 	.word	0xe000e010
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800067a:	680b      	ldr	r3, [r1, #0]
{ 
 800067c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800067e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000680:	2300      	movs	r3, #0
{ 
 8000682:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000684:	9a02      	ldr	r2, [sp, #8]
 8000686:	40da      	lsrs	r2, r3
 8000688:	d101      	bne.n	800068e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800068a:	b007      	add	sp, #28
 800068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800068e:	2201      	movs	r2, #1
 8000690:	409a      	lsls	r2, r3
 8000692:	9203      	str	r2, [sp, #12]
 8000694:	9903      	ldr	r1, [sp, #12]
 8000696:	9a02      	ldr	r2, [sp, #8]
 8000698:	400a      	ands	r2, r1
 800069a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800069c:	d100      	bne.n	80006a0 <HAL_GPIO_Init+0x28>
 800069e:	e08c      	b.n	80007ba <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006a0:	9a01      	ldr	r2, [sp, #4]
 80006a2:	2110      	movs	r1, #16
 80006a4:	6852      	ldr	r2, [r2, #4]
 80006a6:	0016      	movs	r6, r2
 80006a8:	438e      	bics	r6, r1
 80006aa:	2e02      	cmp	r6, #2
 80006ac:	d10e      	bne.n	80006cc <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006ae:	2507      	movs	r5, #7
 80006b0:	401d      	ands	r5, r3
 80006b2:	00ad      	lsls	r5, r5, #2
 80006b4:	3901      	subs	r1, #1
 80006b6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80006b8:	08dc      	lsrs	r4, r3, #3
 80006ba:	00a4      	lsls	r4, r4, #2
 80006bc:	1904      	adds	r4, r0, r4
 80006be:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006c0:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006c2:	9901      	ldr	r1, [sp, #4]
 80006c4:	6909      	ldr	r1, [r1, #16]
 80006c6:	40a9      	lsls	r1, r5
 80006c8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80006ca:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80006cc:	2403      	movs	r4, #3
 80006ce:	005f      	lsls	r7, r3, #1
 80006d0:	40bc      	lsls	r4, r7
 80006d2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80006d4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80006d8:	4025      	ands	r5, r4
 80006da:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006dc:	2503      	movs	r5, #3
 80006de:	4015      	ands	r5, r2
 80006e0:	40bd      	lsls	r5, r7
 80006e2:	4661      	mov	r1, ip
 80006e4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80006e6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e8:	2e01      	cmp	r6, #1
 80006ea:	d80f      	bhi.n	800070c <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80006ec:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80006ee:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80006f0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80006f4:	40bd      	lsls	r5, r7
 80006f6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80006f8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80006fa:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80006fc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006fe:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000700:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000702:	2101      	movs	r1, #1
 8000704:	400d      	ands	r5, r1
 8000706:	409d      	lsls	r5, r3
 8000708:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800070a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800070c:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800070e:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000710:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000712:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000714:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000716:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000718:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800071a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800071c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800071e:	420a      	tst	r2, r1
 8000720:	d04b      	beq.n	80007ba <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2101      	movs	r1, #1
 8000724:	4c26      	ldr	r4, [pc, #152]	; (80007c0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000726:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800072a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072c:	430d      	orrs	r5, r1
 800072e:	61a5      	str	r5, [r4, #24]
 8000730:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000732:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000734:	400c      	ands	r4, r1
 8000736:	9405      	str	r4, [sp, #20]
 8000738:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800073a:	240f      	movs	r4, #15
 800073c:	4921      	ldr	r1, [pc, #132]	; (80007c4 <HAL_GPIO_Init+0x14c>)
 800073e:	00ad      	lsls	r5, r5, #2
 8000740:	00b6      	lsls	r6, r6, #2
 8000742:	186d      	adds	r5, r5, r1
 8000744:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000746:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000748:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800074c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074e:	2400      	movs	r4, #0
 8000750:	4288      	cmp	r0, r1
 8000752:	d00c      	beq.n	800076e <HAL_GPIO_Init+0xf6>
 8000754:	491c      	ldr	r1, [pc, #112]	; (80007c8 <HAL_GPIO_Init+0x150>)
 8000756:	3401      	adds	r4, #1
 8000758:	4288      	cmp	r0, r1
 800075a:	d008      	beq.n	800076e <HAL_GPIO_Init+0xf6>
 800075c:	491b      	ldr	r1, [pc, #108]	; (80007cc <HAL_GPIO_Init+0x154>)
 800075e:	3401      	adds	r4, #1
 8000760:	4288      	cmp	r0, r1
 8000762:	d004      	beq.n	800076e <HAL_GPIO_Init+0xf6>
 8000764:	491a      	ldr	r1, [pc, #104]	; (80007d0 <HAL_GPIO_Init+0x158>)
 8000766:	3403      	adds	r4, #3
 8000768:	4288      	cmp	r0, r1
 800076a:	d100      	bne.n	800076e <HAL_GPIO_Init+0xf6>
 800076c:	3c02      	subs	r4, #2
 800076e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000770:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000774:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000776:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000778:	4c16      	ldr	r4, [pc, #88]	; (80007d4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800077a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800077c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800077e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000780:	03d1      	lsls	r1, r2, #15
 8000782:	d401      	bmi.n	8000788 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000784:	003e      	movs	r6, r7
 8000786:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000788:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800078a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800078c:	9e00      	ldr	r6, [sp, #0]
 800078e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000790:	0391      	lsls	r1, r2, #14
 8000792:	d401      	bmi.n	8000798 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000794:	003e      	movs	r6, r7
 8000796:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000798:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800079a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800079c:	9e00      	ldr	r6, [sp, #0]
 800079e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a0:	02d1      	lsls	r1, r2, #11
 80007a2:	d401      	bmi.n	80007a8 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007a4:	003e      	movs	r6, r7
 80007a6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80007a8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80007aa:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80007ac:	9f00      	ldr	r7, [sp, #0]
 80007ae:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007b0:	0292      	lsls	r2, r2, #10
 80007b2:	d401      	bmi.n	80007b8 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007b4:	402e      	ands	r6, r5
 80007b6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80007b8:	60e7      	str	r7, [r4, #12]
    position++;
 80007ba:	3301      	adds	r3, #1
 80007bc:	e762      	b.n	8000684 <HAL_GPIO_Init+0xc>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800
 80007d0:	48000c00 	.word	0x48000c00
 80007d4:	40010400 	.word	0x40010400

080007d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d001      	beq.n	80007e0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007dc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007de:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007e0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80007e2:	e7fc      	b.n	80007de <HAL_GPIO_WritePin+0x6>

080007e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007e6:	6803      	ldr	r3, [r0, #0]
{
 80007e8:	b085      	sub	sp, #20
 80007ea:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ec:	07db      	lsls	r3, r3, #31
 80007ee:	d42f      	bmi.n	8000850 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	079b      	lsls	r3, r3, #30
 80007f4:	d500      	bpl.n	80007f8 <HAL_RCC_OscConfig+0x14>
 80007f6:	e081      	b.n	80008fc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007f8:	682b      	ldr	r3, [r5, #0]
 80007fa:	071b      	lsls	r3, r3, #28
 80007fc:	d500      	bpl.n	8000800 <HAL_RCC_OscConfig+0x1c>
 80007fe:	e0bc      	b.n	800097a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000800:	682b      	ldr	r3, [r5, #0]
 8000802:	075b      	lsls	r3, r3, #29
 8000804:	d500      	bpl.n	8000808 <HAL_RCC_OscConfig+0x24>
 8000806:	e0df      	b.n	80009c8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	06db      	lsls	r3, r3, #27
 800080c:	d51a      	bpl.n	8000844 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800080e:	696a      	ldr	r2, [r5, #20]
 8000810:	4cb5      	ldr	r4, [pc, #724]	; (8000ae8 <HAL_RCC_OscConfig+0x304>)
 8000812:	2304      	movs	r3, #4
 8000814:	2a01      	cmp	r2, #1
 8000816:	d000      	beq.n	800081a <HAL_RCC_OscConfig+0x36>
 8000818:	e14b      	b.n	8000ab2 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800081a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800081c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800081e:	430b      	orrs	r3, r1
 8000820:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000824:	431a      	orrs	r2, r3
 8000826:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000828:	f7ff fec6 	bl	80005b8 <HAL_GetTick>
 800082c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800082e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000830:	4233      	tst	r3, r6
 8000832:	d100      	bne.n	8000836 <HAL_RCC_OscConfig+0x52>
 8000834:	e136      	b.n	8000aa4 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000836:	21f8      	movs	r1, #248	; 0xf8
 8000838:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800083a:	69ab      	ldr	r3, [r5, #24]
 800083c:	438a      	bics	r2, r1
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4313      	orrs	r3, r2
 8000842:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000844:	6a29      	ldr	r1, [r5, #32]
 8000846:	2900      	cmp	r1, #0
 8000848:	d000      	beq.n	800084c <HAL_RCC_OscConfig+0x68>
 800084a:	e159      	b.n	8000b00 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800084c:	2000      	movs	r0, #0
 800084e:	e013      	b.n	8000878 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000850:	210c      	movs	r1, #12
 8000852:	4ca5      	ldr	r4, [pc, #660]	; (8000ae8 <HAL_RCC_OscConfig+0x304>)
 8000854:	6862      	ldr	r2, [r4, #4]
 8000856:	400a      	ands	r2, r1
 8000858:	2a04      	cmp	r2, #4
 800085a:	d006      	beq.n	800086a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800085c:	6863      	ldr	r3, [r4, #4]
 800085e:	400b      	ands	r3, r1
 8000860:	2b08      	cmp	r3, #8
 8000862:	d10b      	bne.n	800087c <HAL_RCC_OscConfig+0x98>
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	03db      	lsls	r3, r3, #15
 8000868:	d508      	bpl.n	800087c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	039b      	lsls	r3, r3, #14
 800086e:	d5bf      	bpl.n	80007f0 <HAL_RCC_OscConfig+0xc>
 8000870:	686b      	ldr	r3, [r5, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1bc      	bne.n	80007f0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000876:	2001      	movs	r0, #1
}
 8000878:	b005      	add	sp, #20
 800087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087c:	686b      	ldr	r3, [r5, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d113      	bne.n	80008aa <HAL_RCC_OscConfig+0xc6>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	6822      	ldr	r2, [r4, #0]
 8000886:	025b      	lsls	r3, r3, #9
 8000888:	4313      	orrs	r3, r2
 800088a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800088c:	f7ff fe94 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000890:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000892:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000894:	02b6      	lsls	r6, r6, #10
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	4233      	tst	r3, r6
 800089a:	d1a9      	bne.n	80007f0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800089c:	f7ff fe8c 	bl	80005b8 <HAL_GetTick>
 80008a0:	1bc0      	subs	r0, r0, r7
 80008a2:	2864      	cmp	r0, #100	; 0x64
 80008a4:	d9f7      	bls.n	8000896 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80008a6:	2003      	movs	r0, #3
 80008a8:	e7e6      	b.n	8000878 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d116      	bne.n	80008dc <HAL_RCC_OscConfig+0xf8>
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	4a8e      	ldr	r2, [pc, #568]	; (8000aec <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b4:	4013      	ands	r3, r2
 80008b6:	6023      	str	r3, [r4, #0]
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	4a8d      	ldr	r2, [pc, #564]	; (8000af0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008bc:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008be:	4013      	ands	r3, r2
 80008c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe79 	bl	80005b8 <HAL_GetTick>
 80008c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	4233      	tst	r3, r6
 80008cc:	d100      	bne.n	80008d0 <HAL_RCC_OscConfig+0xec>
 80008ce:	e78f      	b.n	80007f0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d0:	f7ff fe72 	bl	80005b8 <HAL_GetTick>
 80008d4:	1bc0      	subs	r0, r0, r7
 80008d6:	2864      	cmp	r0, #100	; 0x64
 80008d8:	d9f6      	bls.n	80008c8 <HAL_RCC_OscConfig+0xe4>
 80008da:	e7e4      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008dc:	2b05      	cmp	r3, #5
 80008de:	d105      	bne.n	80008ec <HAL_RCC_OscConfig+0x108>
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	6822      	ldr	r2, [r4, #0]
 80008e4:	02db      	lsls	r3, r3, #11
 80008e6:	4313      	orrs	r3, r2
 80008e8:	6023      	str	r3, [r4, #0]
 80008ea:	e7ca      	b.n	8000882 <HAL_RCC_OscConfig+0x9e>
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	4a7f      	ldr	r2, [pc, #508]	; (8000aec <HAL_RCC_OscConfig+0x308>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	6023      	str	r3, [r4, #0]
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	4a7e      	ldr	r2, [pc, #504]	; (8000af0 <HAL_RCC_OscConfig+0x30c>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	e7c6      	b.n	800088a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008fc:	220c      	movs	r2, #12
 80008fe:	4c7a      	ldr	r4, [pc, #488]	; (8000ae8 <HAL_RCC_OscConfig+0x304>)
 8000900:	6863      	ldr	r3, [r4, #4]
 8000902:	4213      	tst	r3, r2
 8000904:	d006      	beq.n	8000914 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000906:	6863      	ldr	r3, [r4, #4]
 8000908:	4013      	ands	r3, r2
 800090a:	2b08      	cmp	r3, #8
 800090c:	d110      	bne.n	8000930 <HAL_RCC_OscConfig+0x14c>
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	03db      	lsls	r3, r3, #15
 8000912:	d40d      	bmi.n	8000930 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	079b      	lsls	r3, r3, #30
 8000918:	d502      	bpl.n	8000920 <HAL_RCC_OscConfig+0x13c>
 800091a:	68eb      	ldr	r3, [r5, #12]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d1aa      	bne.n	8000876 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000920:	21f8      	movs	r1, #248	; 0xf8
 8000922:	6822      	ldr	r2, [r4, #0]
 8000924:	692b      	ldr	r3, [r5, #16]
 8000926:	438a      	bics	r2, r1
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	4313      	orrs	r3, r2
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	e763      	b.n	80007f8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000930:	68ea      	ldr	r2, [r5, #12]
 8000932:	2301      	movs	r3, #1
 8000934:	2a00      	cmp	r2, #0
 8000936:	d00f      	beq.n	8000958 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000938:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800093c:	4313      	orrs	r3, r2
 800093e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000940:	f7ff fe3a 	bl	80005b8 <HAL_GetTick>
 8000944:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	4233      	tst	r3, r6
 800094a:	d1e9      	bne.n	8000920 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800094c:	f7ff fe34 	bl	80005b8 <HAL_GetTick>
 8000950:	1bc0      	subs	r0, r0, r7
 8000952:	2802      	cmp	r0, #2
 8000954:	d9f7      	bls.n	8000946 <HAL_RCC_OscConfig+0x162>
 8000956:	e7a6      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000958:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800095a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800095c:	439a      	bics	r2, r3
 800095e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000960:	f7ff fe2a 	bl	80005b8 <HAL_GetTick>
 8000964:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	4233      	tst	r3, r6
 800096a:	d100      	bne.n	800096e <HAL_RCC_OscConfig+0x18a>
 800096c:	e744      	b.n	80007f8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800096e:	f7ff fe23 	bl	80005b8 <HAL_GetTick>
 8000972:	1bc0      	subs	r0, r0, r7
 8000974:	2802      	cmp	r0, #2
 8000976:	d9f6      	bls.n	8000966 <HAL_RCC_OscConfig+0x182>
 8000978:	e795      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800097a:	69ea      	ldr	r2, [r5, #28]
 800097c:	2301      	movs	r3, #1
 800097e:	4c5a      	ldr	r4, [pc, #360]	; (8000ae8 <HAL_RCC_OscConfig+0x304>)
 8000980:	2a00      	cmp	r2, #0
 8000982:	d010      	beq.n	80009a6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000984:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000986:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000988:	4313      	orrs	r3, r2
 800098a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800098c:	f7ff fe14 	bl	80005b8 <HAL_GetTick>
 8000990:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000994:	4233      	tst	r3, r6
 8000996:	d000      	beq.n	800099a <HAL_RCC_OscConfig+0x1b6>
 8000998:	e732      	b.n	8000800 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800099a:	f7ff fe0d 	bl	80005b8 <HAL_GetTick>
 800099e:	1bc0      	subs	r0, r0, r7
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9f6      	bls.n	8000992 <HAL_RCC_OscConfig+0x1ae>
 80009a4:	e77f      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80009a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80009aa:	439a      	bics	r2, r3
 80009ac:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80009ae:	f7ff fe03 	bl	80005b8 <HAL_GetTick>
 80009b2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009b6:	4233      	tst	r3, r6
 80009b8:	d100      	bne.n	80009bc <HAL_RCC_OscConfig+0x1d8>
 80009ba:	e721      	b.n	8000800 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009bc:	f7ff fdfc 	bl	80005b8 <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f6      	bls.n	80009b4 <HAL_RCC_OscConfig+0x1d0>
 80009c6:	e76e      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009c8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80009ca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009cc:	4c46      	ldr	r4, [pc, #280]	; (8000ae8 <HAL_RCC_OscConfig+0x304>)
 80009ce:	0552      	lsls	r2, r2, #21
 80009d0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80009d2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d4:	4213      	tst	r3, r2
 80009d6:	d108      	bne.n	80009ea <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	69e3      	ldr	r3, [r4, #28]
 80009da:	4313      	orrs	r3, r2
 80009dc:	61e3      	str	r3, [r4, #28]
 80009de:	69e3      	ldr	r3, [r4, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	9303      	str	r3, [sp, #12]
 80009e4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80009e6:	2301      	movs	r3, #1
 80009e8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ea:	2780      	movs	r7, #128	; 0x80
 80009ec:	4e41      	ldr	r6, [pc, #260]	; (8000af4 <HAL_RCC_OscConfig+0x310>)
 80009ee:	007f      	lsls	r7, r7, #1
 80009f0:	6833      	ldr	r3, [r6, #0]
 80009f2:	423b      	tst	r3, r7
 80009f4:	d006      	beq.n	8000a04 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f6:	68ab      	ldr	r3, [r5, #8]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d113      	bne.n	8000a24 <HAL_RCC_OscConfig+0x240>
 80009fc:	6a22      	ldr	r2, [r4, #32]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	6223      	str	r3, [r4, #32]
 8000a02:	e030      	b.n	8000a66 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a04:	6833      	ldr	r3, [r6, #0]
 8000a06:	433b      	orrs	r3, r7
 8000a08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a0a:	f7ff fdd5 	bl	80005b8 <HAL_GetTick>
 8000a0e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a10:	6833      	ldr	r3, [r6, #0]
 8000a12:	423b      	tst	r3, r7
 8000a14:	d1ef      	bne.n	80009f6 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a16:	f7ff fdcf 	bl	80005b8 <HAL_GetTick>
 8000a1a:	9b01      	ldr	r3, [sp, #4]
 8000a1c:	1ac0      	subs	r0, r0, r3
 8000a1e:	2864      	cmp	r0, #100	; 0x64
 8000a20:	d9f6      	bls.n	8000a10 <HAL_RCC_OscConfig+0x22c>
 8000a22:	e740      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
 8000a24:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d114      	bne.n	8000a54 <HAL_RCC_OscConfig+0x270>
 8000a2a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a2c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2e:	4393      	bics	r3, r2
 8000a30:	6223      	str	r3, [r4, #32]
 8000a32:	6a23      	ldr	r3, [r4, #32]
 8000a34:	3203      	adds	r2, #3
 8000a36:	4393      	bics	r3, r2
 8000a38:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a3a:	f7ff fdbd 	bl	80005b8 <HAL_GetTick>
 8000a3e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a40:	6a23      	ldr	r3, [r4, #32]
 8000a42:	423b      	tst	r3, r7
 8000a44:	d025      	beq.n	8000a92 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a46:	f7ff fdb7 	bl	80005b8 <HAL_GetTick>
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_RCC_OscConfig+0x314>)
 8000a4c:	1b80      	subs	r0, r0, r6
 8000a4e:	4298      	cmp	r0, r3
 8000a50:	d9f6      	bls.n	8000a40 <HAL_RCC_OscConfig+0x25c>
 8000a52:	e728      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10b      	bne.n	8000a70 <HAL_RCC_OscConfig+0x28c>
 8000a58:	6a21      	ldr	r1, [r4, #32]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	6223      	str	r3, [r4, #32]
 8000a60:	6a23      	ldr	r3, [r4, #32]
 8000a62:	431a      	orrs	r2, r3
 8000a64:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000a66:	f7ff fda7 	bl	80005b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a6a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000a6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a6e:	e00d      	b.n	8000a8c <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	6a23      	ldr	r3, [r4, #32]
 8000a72:	4393      	bics	r3, r2
 8000a74:	2204      	movs	r2, #4
 8000a76:	6223      	str	r3, [r4, #32]
 8000a78:	6a23      	ldr	r3, [r4, #32]
 8000a7a:	4393      	bics	r3, r2
 8000a7c:	e7c0      	b.n	8000a00 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fd9b 	bl	80005b8 <HAL_GetTick>
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_RCC_OscConfig+0x314>)
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	4298      	cmp	r0, r3
 8000a88:	d900      	bls.n	8000a8c <HAL_RCC_OscConfig+0x2a8>
 8000a8a:	e70c      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a8c:	6a23      	ldr	r3, [r4, #32]
 8000a8e:	423b      	tst	r3, r7
 8000a90:	d0f5      	beq.n	8000a7e <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000a92:	9b00      	ldr	r3, [sp, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d000      	beq.n	8000a9a <HAL_RCC_OscConfig+0x2b6>
 8000a98:	e6b6      	b.n	8000808 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a9a:	69e3      	ldr	r3, [r4, #28]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_RCC_OscConfig+0x318>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61e3      	str	r3, [r4, #28]
 8000aa2:	e6b1      	b.n	8000808 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000aa4:	f7ff fd88 	bl	80005b8 <HAL_GetTick>
 8000aa8:	1bc0      	subs	r0, r0, r7
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d800      	bhi.n	8000ab0 <HAL_RCC_OscConfig+0x2cc>
 8000aae:	e6be      	b.n	800082e <HAL_RCC_OscConfig+0x4a>
 8000ab0:	e6f9      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ab2:	3205      	adds	r2, #5
 8000ab4:	d103      	bne.n	8000abe <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ab6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ab8:	439a      	bics	r2, r3
 8000aba:	6362      	str	r2, [r4, #52]	; 0x34
 8000abc:	e6bb      	b.n	8000836 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000abe:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ac0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000ac4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aca:	4393      	bics	r3, r2
 8000acc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ace:	f7ff fd73 	bl	80005b8 <HAL_GetTick>
 8000ad2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ad6:	4233      	tst	r3, r6
 8000ad8:	d100      	bne.n	8000adc <HAL_RCC_OscConfig+0x2f8>
 8000ada:	e6b3      	b.n	8000844 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000adc:	f7ff fd6c 	bl	80005b8 <HAL_GetTick>
 8000ae0:	1bc0      	subs	r0, r0, r7
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9f6      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x2f0>
 8000ae6:	e6de      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	fffeffff 	.word	0xfffeffff
 8000af0:	fffbffff 	.word	0xfffbffff
 8000af4:	40007000 	.word	0x40007000
 8000af8:	00001388 	.word	0x00001388
 8000afc:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b00:	220c      	movs	r2, #12
 8000b02:	4c26      	ldr	r4, [pc, #152]	; (8000b9c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000b04:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b06:	6863      	ldr	r3, [r4, #4]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d100      	bne.n	8000b10 <HAL_RCC_OscConfig+0x32c>
 8000b0e:	e6b3      	b.n	8000878 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <HAL_RCC_OscConfig+0x3bc>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b18:	2902      	cmp	r1, #2
 8000b1a:	d12f      	bne.n	8000b7c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fd4c 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b20:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b24:	04b6      	lsls	r6, r6, #18
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	4233      	tst	r3, r6
 8000b2a:	d121      	bne.n	8000b70 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b30:	4393      	bics	r3, r2
 8000b32:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000b34:	4313      	orrs	r3, r2
 8000b36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b3c:	6862      	ldr	r2, [r4, #4]
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	4918      	ldr	r1, [pc, #96]	; (8000ba4 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b42:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b44:	400a      	ands	r2, r1
 8000b46:	4313      	orrs	r3, r2
 8000b48:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	045b      	lsls	r3, r3, #17
 8000b50:	4313      	orrs	r3, r2
 8000b52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b54:	f7ff fd30 	bl	80005b8 <HAL_GetTick>
 8000b58:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b5a:	04ad      	lsls	r5, r5, #18
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	422b      	tst	r3, r5
 8000b60:	d000      	beq.n	8000b64 <HAL_RCC_OscConfig+0x380>
 8000b62:	e673      	b.n	800084c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b64:	f7ff fd28 	bl	80005b8 <HAL_GetTick>
 8000b68:	1b80      	subs	r0, r0, r6
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d9f6      	bls.n	8000b5c <HAL_RCC_OscConfig+0x378>
 8000b6e:	e69a      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b70:	f7ff fd22 	bl	80005b8 <HAL_GetTick>
 8000b74:	1bc0      	subs	r0, r0, r7
 8000b76:	2802      	cmp	r0, #2
 8000b78:	d9d5      	bls.n	8000b26 <HAL_RCC_OscConfig+0x342>
 8000b7a:	e694      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fd1c 	bl	80005b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b80:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b82:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b84:	04ad      	lsls	r5, r5, #18
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	422b      	tst	r3, r5
 8000b8a:	d100      	bne.n	8000b8e <HAL_RCC_OscConfig+0x3aa>
 8000b8c:	e65e      	b.n	800084c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fd13 	bl	80005b8 <HAL_GetTick>
 8000b92:	1b80      	subs	r0, r0, r6
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x3a2>
 8000b98:	e685      	b.n	80008a6 <HAL_RCC_OscConfig+0xc2>
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	feffffff 	.word	0xfeffffff
 8000ba4:	ffc2ffff 	.word	0xffc2ffff

08000ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ba8:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000baa:	4c14      	ldr	r4, [pc, #80]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000bac:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000bae:	2210      	movs	r2, #16
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	4668      	mov	r0, sp
 8000bb4:	f000 fad6 	bl	8001164 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000bb8:	0021      	movs	r1, r4
 8000bba:	ad04      	add	r5, sp, #16
 8000bbc:	2210      	movs	r2, #16
 8000bbe:	3110      	adds	r1, #16
 8000bc0:	0028      	movs	r0, r5
 8000bc2:	f000 facf 	bl	8001164 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bc6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000bc8:	4e0d      	ldr	r6, [pc, #52]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bca:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000bcc:	401a      	ands	r2, r3
 8000bce:	2a08      	cmp	r2, #8
 8000bd0:	d111      	bne.n	8000bf6 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	466a      	mov	r2, sp
 8000bd6:	0c99      	lsrs	r1, r3, #18
 8000bd8:	4001      	ands	r1, r0
 8000bda:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000bdc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000bde:	4002      	ands	r2, r0
 8000be0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000be2:	03db      	lsls	r3, r3, #15
 8000be4:	d505      	bpl.n	8000bf2 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000be8:	f7ff faa2 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000bec:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bee:	b008      	add	sp, #32
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x60>)
 8000bf4:	e7fa      	b.n	8000bec <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000bf8:	e7f9      	b.n	8000bee <HAL_RCC_GetSysClockFreq+0x46>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	08002004 	.word	0x08002004
 8000c00:	40021000 	.word	0x40021000
 8000c04:	007a1200 	.word	0x007a1200
 8000c08:	003d0900 	.word	0x003d0900

08000c0c <HAL_RCC_ClockConfig>:
{
 8000c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4c43      	ldr	r4, [pc, #268]	; (8000d20 <HAL_RCC_ClockConfig+0x114>)
{
 8000c12:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c14:	6823      	ldr	r3, [r4, #0]
{
 8000c16:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c18:	4013      	ands	r3, r2
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d31c      	bcc.n	8000c58 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c1e:	6832      	ldr	r2, [r6, #0]
 8000c20:	0793      	lsls	r3, r2, #30
 8000c22:	d423      	bmi.n	8000c6c <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c24:	07d3      	lsls	r3, r2, #31
 8000c26:	d429      	bmi.n	8000c7c <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c28:	2301      	movs	r3, #1
 8000c2a:	6822      	ldr	r2, [r4, #0]
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	4297      	cmp	r7, r2
 8000c30:	d367      	bcc.n	8000d02 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c32:	6833      	ldr	r3, [r6, #0]
 8000c34:	4c3b      	ldr	r4, [pc, #236]	; (8000d24 <HAL_RCC_ClockConfig+0x118>)
 8000c36:	075b      	lsls	r3, r3, #29
 8000c38:	d46a      	bmi.n	8000d10 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c3a:	f7ff ffb5 	bl	8000ba8 <HAL_RCC_GetSysClockFreq>
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	4a39      	ldr	r2, [pc, #228]	; (8000d28 <HAL_RCC_ClockConfig+0x11c>)
 8000c42:	061b      	lsls	r3, r3, #24
 8000c44:	0f1b      	lsrs	r3, r3, #28
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	40d8      	lsrs	r0, r3
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <HAL_RCC_ClockConfig+0x120>)
 8000c4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fc88 	bl	8000564 <HAL_InitTick>
  return HAL_OK;
 8000c54:	2000      	movs	r0, #0
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	4393      	bics	r3, r2
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	4013      	ands	r3, r2
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d0da      	beq.n	8000c1e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000c68:	2001      	movs	r0, #1
}
 8000c6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c6c:	20f0      	movs	r0, #240	; 0xf0
 8000c6e:	492d      	ldr	r1, [pc, #180]	; (8000d24 <HAL_RCC_ClockConfig+0x118>)
 8000c70:	684b      	ldr	r3, [r1, #4]
 8000c72:	4383      	bics	r3, r0
 8000c74:	68b0      	ldr	r0, [r6, #8]
 8000c76:	4303      	orrs	r3, r0
 8000c78:	604b      	str	r3, [r1, #4]
 8000c7a:	e7d3      	b.n	8000c24 <HAL_RCC_ClockConfig+0x18>
 8000c7c:	4d29      	ldr	r5, [pc, #164]	; (8000d24 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c7e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c80:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c82:	2a01      	cmp	r2, #1
 8000c84:	d11a      	bne.n	8000cbc <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	039b      	lsls	r3, r3, #14
 8000c88:	d5ee      	bpl.n	8000c68 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	686b      	ldr	r3, [r5, #4]
 8000c8e:	438b      	bics	r3, r1
 8000c90:	4313      	orrs	r3, r2
 8000c92:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000c94:	f7ff fc90 	bl	80005b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c98:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c9a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d115      	bne.n	8000ccc <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ca0:	220c      	movs	r2, #12
 8000ca2:	686b      	ldr	r3, [r5, #4]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d0be      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000caa:	f7ff fc85 	bl	80005b8 <HAL_GetTick>
 8000cae:	9b01      	ldr	r3, [sp, #4]
 8000cb0:	1ac0      	subs	r0, r0, r3
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_RCC_ClockConfig+0x124>)
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	d9f3      	bls.n	8000ca0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000cb8:	2003      	movs	r0, #3
 8000cba:	e7d6      	b.n	8000c6a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cbc:	2a02      	cmp	r2, #2
 8000cbe:	d102      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	d4e2      	bmi.n	8000c8a <HAL_RCC_ClockConfig+0x7e>
 8000cc4:	e7d0      	b.n	8000c68 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc6:	079b      	lsls	r3, r3, #30
 8000cc8:	d4df      	bmi.n	8000c8a <HAL_RCC_ClockConfig+0x7e>
 8000cca:	e7cd      	b.n	8000c68 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d012      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	686b      	ldr	r3, [r5, #4]
 8000cd4:	4213      	tst	r3, r2
 8000cd6:	d0a7      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd8:	f7ff fc6e 	bl	80005b8 <HAL_GetTick>
 8000cdc:	9b01      	ldr	r3, [sp, #4]
 8000cde:	1ac0      	subs	r0, r0, r3
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_RCC_ClockConfig+0x124>)
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d9f4      	bls.n	8000cd0 <HAL_RCC_ClockConfig+0xc4>
 8000ce6:	e7e7      	b.n	8000cb8 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce8:	f7ff fc66 	bl	80005b8 <HAL_GetTick>
 8000cec:	9b01      	ldr	r3, [sp, #4]
 8000cee:	1ac0      	subs	r0, r0, r3
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_RCC_ClockConfig+0x124>)
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d8e0      	bhi.n	8000cb8 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	686b      	ldr	r3, [r5, #4]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d1f3      	bne.n	8000ce8 <HAL_RCC_ClockConfig+0xdc>
 8000d00:	e792      	b.n	8000c28 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d02:	6822      	ldr	r2, [r4, #0]
 8000d04:	439a      	bics	r2, r3
 8000d06:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	421a      	tst	r2, r3
 8000d0c:	d1ac      	bne.n	8000c68 <HAL_RCC_ClockConfig+0x5c>
 8000d0e:	e790      	b.n	8000c32 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_RCC_ClockConfig+0x128>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	68f2      	ldr	r2, [r6, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	6063      	str	r3, [r4, #4]
 8000d1c:	e78d      	b.n	8000c3a <HAL_RCC_ClockConfig+0x2e>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40022000 	.word	0x40022000
 8000d24:	40021000 	.word	0x40021000
 8000d28:	08002036 	.word	0x08002036
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	00001388 	.word	0x00001388
 8000d34:	fffff8ff 	.word	0xfffff8ff

08000d38 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000d38:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
}
 8000d3c:	4770      	bx	lr
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20000000 	.word	0x20000000

08000d44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	055b      	lsls	r3, r3, #21
 8000d4c:	0f5b      	lsrs	r3, r3, #29
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d52:	6810      	ldr	r0, [r2, #0]
 8000d54:	40d8      	lsrs	r0, r3
}    
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	08002046 	.word	0x08002046
 8000d60:	20000000 	.word	0x20000000

08000d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d68:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d6a:	69c2      	ldr	r2, [r0, #28]
 8000d6c:	6883      	ldr	r3, [r0, #8]
 8000d6e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d70:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d72:	4303      	orrs	r3, r0
 8000d74:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d76:	4e3f      	ldr	r6, [pc, #252]	; (8000e74 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d78:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d7a:	483f      	ldr	r0, [pc, #252]	; (8000e78 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d7c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d7e:	4001      	ands	r1, r0
 8000d80:	430b      	orrs	r3, r1
 8000d82:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d84:	686b      	ldr	r3, [r5, #4]
 8000d86:	493d      	ldr	r1, [pc, #244]	; (8000e7c <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d88:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	68e1      	ldr	r1, [r4, #12]
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d92:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d94:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d96:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d98:	4839      	ldr	r0, [pc, #228]	; (8000e80 <UART_SetConfig+0x11c>)
 8000d9a:	4001      	ands	r1, r0
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	60ab      	str	r3, [r5, #8]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d110      	bne.n	8000dca <UART_SetConfig+0x66>
 8000da8:	2003      	movs	r0, #3
 8000daa:	4936      	ldr	r1, [pc, #216]	; (8000e84 <UART_SetConfig+0x120>)
 8000dac:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000dae:	4001      	ands	r1, r0
 8000db0:	4835      	ldr	r0, [pc, #212]	; (8000e88 <UART_SetConfig+0x124>)
 8000db2:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d013      	beq.n	8000de0 <UART_SetConfig+0x7c>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000db8:	2808      	cmp	r0, #8
 8000dba:	d858      	bhi.n	8000e6e <UART_SetConfig+0x10a>
 8000dbc:	f7ff f9ae 	bl	800011c <__gnu_thumb1_case_uqi>
 8000dc0:	57425737 	.word	0x57425737
 8000dc4:	5757574b 	.word	0x5757574b
 8000dc8:	50          	.byte	0x50
 8000dc9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000dca:	4930      	ldr	r1, [pc, #192]	; (8000e8c <UART_SetConfig+0x128>)
 8000dcc:	428d      	cmp	r5, r1
 8000dce:	d14c      	bne.n	8000e6a <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d12c      	bne.n	8000e2e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000dd4:	f7ff ffb6 	bl	8000d44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	0040      	lsls	r0, r0, #1
 8000ddc:	085b      	lsrs	r3, r3, #1
 8000dde:	e00b      	b.n	8000df8 <UART_SetConfig+0x94>
    switch (clocksource)
 8000de0:	2808      	cmp	r0, #8
 8000de2:	d821      	bhi.n	8000e28 <UART_SetConfig+0xc4>
 8000de4:	f7ff f990 	bl	8000108 <__gnu_thumb1_case_sqi>
 8000de8:	200520f6 	.word	0x200520f6
 8000dec:	20202018 	.word	0x20202018
 8000df0:	1b          	.byte	0x1b
 8000df1:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000df2:	6863      	ldr	r3, [r4, #4]
 8000df4:	0858      	lsrs	r0, r3, #1
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000df8:	18c0      	adds	r0, r0, r3
 8000dfa:	6861      	ldr	r1, [r4, #4]
 8000dfc:	f7ff f998 	bl	8000130 <__udivsi3>
 8000e00:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e02:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000e04:	220f      	movs	r2, #15
 8000e06:	0019      	movs	r1, r3
 8000e08:	4391      	bics	r1, r2
 8000e0a:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e0c:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000e0e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e10:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e18:	f7ff fec6 	bl	8000ba8 <HAL_RCC_GetSysClockFreq>
 8000e1c:	e7dc      	b.n	8000dd8 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e1e:	6863      	ldr	r3, [r4, #4]
 8000e20:	0858      	lsrs	r0, r3, #1
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	025b      	lsls	r3, r3, #9
 8000e26:	e7e7      	b.n	8000df8 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8000e28:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e7ea      	b.n	8000e04 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000e2e:	f7ff ff89 	bl	8000d44 <HAL_RCC_GetPCLK1Freq>
 8000e32:	6861      	ldr	r1, [r4, #4]
 8000e34:	084b      	lsrs	r3, r1, #1
 8000e36:	1818      	adds	r0, r3, r0
 8000e38:	f7ff f97a 	bl	8000130 <__udivsi3>
 8000e3c:	b280      	uxth	r0, r0
 8000e3e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e40:	2000      	movs	r0, #0
        break;
 8000e42:	e7e8      	b.n	8000e16 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000e44:	6861      	ldr	r1, [r4, #4]
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <UART_SetConfig+0x130>)
 8000e48:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e4a:	18c0      	adds	r0, r0, r3
 8000e4c:	f7ff f970 	bl	8000130 <__udivsi3>
 8000e50:	b280      	uxth	r0, r0
 8000e52:	60f0      	str	r0, [r6, #12]
 8000e54:	e7f4      	b.n	8000e40 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e56:	f7ff fea7 	bl	8000ba8 <HAL_RCC_GetSysClockFreq>
 8000e5a:	6861      	ldr	r1, [r4, #4]
 8000e5c:	084b      	lsrs	r3, r1, #1
 8000e5e:	e7f4      	b.n	8000e4a <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	6861      	ldr	r1, [r4, #4]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	0848      	lsrs	r0, r1, #1
 8000e68:	e7ef      	b.n	8000e4a <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d0dc      	beq.n	8000e28 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8000e6e:	2001      	movs	r0, #1
  return ret;
 8000e70:	e7d1      	b.n	8000e16 <UART_SetConfig+0xb2>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40013800 	.word	0x40013800
 8000e78:	ffff69f3 	.word	0xffff69f3
 8000e7c:	ffffcfff 	.word	0xffffcfff
 8000e80:	fffff4ff 	.word	0xfffff4ff
 8000e84:	40021000 	.word	0x40021000
 8000e88:	0800204e 	.word	0x0800204e
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	00f42400 	.word	0x00f42400
 8000e94:	007a1200 	.word	0x007a1200

08000e98 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e98:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000e9a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e9c:	07da      	lsls	r2, r3, #31
 8000e9e:	d506      	bpl.n	8000eae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000ea0:	6801      	ldr	r1, [r0, #0]
 8000ea2:	4c28      	ldr	r4, [pc, #160]	; (8000f44 <UART_AdvFeatureConfig+0xac>)
 8000ea4:	684a      	ldr	r2, [r1, #4]
 8000ea6:	4022      	ands	r2, r4
 8000ea8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000eaa:	4322      	orrs	r2, r4
 8000eac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000eae:	079a      	lsls	r2, r3, #30
 8000eb0:	d506      	bpl.n	8000ec0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000eb2:	6801      	ldr	r1, [r0, #0]
 8000eb4:	4c24      	ldr	r4, [pc, #144]	; (8000f48 <UART_AdvFeatureConfig+0xb0>)
 8000eb6:	684a      	ldr	r2, [r1, #4]
 8000eb8:	4022      	ands	r2, r4
 8000eba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000ebc:	4322      	orrs	r2, r4
 8000ebe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000ec0:	075a      	lsls	r2, r3, #29
 8000ec2:	d506      	bpl.n	8000ed2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000ec4:	6801      	ldr	r1, [r0, #0]
 8000ec6:	4c21      	ldr	r4, [pc, #132]	; (8000f4c <UART_AdvFeatureConfig+0xb4>)
 8000ec8:	684a      	ldr	r2, [r1, #4]
 8000eca:	4022      	ands	r2, r4
 8000ecc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000ece:	4322      	orrs	r2, r4
 8000ed0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000ed2:	071a      	lsls	r2, r3, #28
 8000ed4:	d506      	bpl.n	8000ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000ed6:	6801      	ldr	r1, [r0, #0]
 8000ed8:	4c1d      	ldr	r4, [pc, #116]	; (8000f50 <UART_AdvFeatureConfig+0xb8>)
 8000eda:	684a      	ldr	r2, [r1, #4]
 8000edc:	4022      	ands	r2, r4
 8000ede:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000ee4:	06da      	lsls	r2, r3, #27
 8000ee6:	d506      	bpl.n	8000ef6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000ee8:	6801      	ldr	r1, [r0, #0]
 8000eea:	4c1a      	ldr	r4, [pc, #104]	; (8000f54 <UART_AdvFeatureConfig+0xbc>)
 8000eec:	688a      	ldr	r2, [r1, #8]
 8000eee:	4022      	ands	r2, r4
 8000ef0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000ef2:	4322      	orrs	r2, r4
 8000ef4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000ef6:	069a      	lsls	r2, r3, #26
 8000ef8:	d506      	bpl.n	8000f08 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000efa:	6801      	ldr	r1, [r0, #0]
 8000efc:	4c16      	ldr	r4, [pc, #88]	; (8000f58 <UART_AdvFeatureConfig+0xc0>)
 8000efe:	688a      	ldr	r2, [r1, #8]
 8000f00:	4022      	ands	r2, r4
 8000f02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000f04:	4322      	orrs	r2, r4
 8000f06:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000f08:	065a      	lsls	r2, r3, #25
 8000f0a:	d510      	bpl.n	8000f2e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000f0c:	6801      	ldr	r1, [r0, #0]
 8000f0e:	4d13      	ldr	r5, [pc, #76]	; (8000f5c <UART_AdvFeatureConfig+0xc4>)
 8000f10:	684a      	ldr	r2, [r1, #4]
 8000f12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000f14:	402a      	ands	r2, r5
 8000f16:	4322      	orrs	r2, r4
 8000f18:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	0352      	lsls	r2, r2, #13
 8000f1e:	4294      	cmp	r4, r2
 8000f20:	d105      	bne.n	8000f2e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000f22:	684a      	ldr	r2, [r1, #4]
 8000f24:	4c0e      	ldr	r4, [pc, #56]	; (8000f60 <UART_AdvFeatureConfig+0xc8>)
 8000f26:	4022      	ands	r2, r4
 8000f28:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000f2a:	4322      	orrs	r2, r4
 8000f2c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000f2e:	061b      	lsls	r3, r3, #24
 8000f30:	d506      	bpl.n	8000f40 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000f32:	6802      	ldr	r2, [r0, #0]
 8000f34:	490b      	ldr	r1, [pc, #44]	; (8000f64 <UART_AdvFeatureConfig+0xcc>)
 8000f36:	6853      	ldr	r3, [r2, #4]
 8000f38:	400b      	ands	r3, r1
 8000f3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6053      	str	r3, [r2, #4]
  }
}
 8000f40:	bd30      	pop	{r4, r5, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	fffdffff 	.word	0xfffdffff
 8000f48:	fffeffff 	.word	0xfffeffff
 8000f4c:	fffbffff 	.word	0xfffbffff
 8000f50:	ffff7fff 	.word	0xffff7fff
 8000f54:	ffffefff 	.word	0xffffefff
 8000f58:	ffffdfff 	.word	0xffffdfff
 8000f5c:	ffefffff 	.word	0xffefffff
 8000f60:	ff9fffff 	.word	0xff9fffff
 8000f64:	fff7ffff 	.word	0xfff7ffff

08000f68 <HAL_UART_Init>:
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8000f6c:	d101      	bne.n	8000f72 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
}
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f72:	0005      	movs	r5, r0
 8000f74:	3569      	adds	r5, #105	; 0x69
 8000f76:	782b      	ldrb	r3, [r5, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8000f7e:	0002      	movs	r2, r0
 8000f80:	3268      	adds	r2, #104	; 0x68
 8000f82:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8000f84:	f7ff fa88 	bl	8000498 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f88:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f8e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8000f90:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000f92:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f94:	438b      	bics	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000f98:	f7ff fee4 	bl	8000d64 <UART_SetConfig>
 8000f9c:	2801      	cmp	r0, #1
 8000f9e:	d0e6      	beq.n	8000f6e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f7ff ff76 	bl	8000e98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	490b      	ldr	r1, [pc, #44]	; (8000fdc <HAL_UART_Init+0x74>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000fb4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000fb6:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8000fc8:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8000fca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fcc:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8000fce:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8000fd0:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8000fd2:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8000fd4:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8000fd6:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8000fd8:	e7ca      	b.n	8000f70 <HAL_UART_Init+0x8>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	fffff7ff 	.word	0xfffff7ff

08000fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	0004      	movs	r4, r0
 8000fe4:	000e      	movs	r6, r1
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	69d3      	ldr	r3, [r2, #28]
 8000fee:	4033      	ands	r3, r6
 8000ff0:	1b9b      	subs	r3, r3, r6
 8000ff2:	4259      	negs	r1, r3
 8000ff4:	414b      	adcs	r3, r1
 8000ff6:	42ab      	cmp	r3, r5
 8000ff8:	d001      	beq.n	8000ffe <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e018      	b.n	8001030 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8000ffe:	9b06      	ldr	r3, [sp, #24]
 8001000:	3301      	adds	r3, #1
 8001002:	d0f3      	beq.n	8000fec <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001004:	9b06      	ldr	r3, [sp, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d113      	bne.n	8001032 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <UART_WaitOnFlagUntilTimeout+0x60>)
 800100e:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001010:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	31a3      	adds	r1, #163	; 0xa3
 800101a:	31ff      	adds	r1, #255	; 0xff
 800101c:	438a      	bics	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001020:	0022      	movs	r2, r4
 8001022:	2320      	movs	r3, #32
 8001024:	3269      	adds	r2, #105	; 0x69
 8001026:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001028:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800102a:	2300      	movs	r3, #0
 800102c:	3468      	adds	r4, #104	; 0x68
 800102e:	7023      	strb	r3, [r4, #0]
}
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001032:	f7ff fac1 	bl	80005b8 <HAL_GetTick>
 8001036:	9b06      	ldr	r3, [sp, #24]
 8001038:	1bc0      	subs	r0, r0, r7
 800103a:	4283      	cmp	r3, r0
 800103c:	d2d5      	bcs.n	8000fea <UART_WaitOnFlagUntilTimeout+0xa>
 800103e:	e7e4      	b.n	800100a <UART_WaitOnFlagUntilTimeout+0x2a>
 8001040:	fffffe5f 	.word	0xfffffe5f

08001044 <HAL_UART_Transmit>:
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001046:	0007      	movs	r7, r0
{
 8001048:	b085      	sub	sp, #20
 800104a:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 800104c:	3769      	adds	r7, #105	; 0x69
 800104e:	783b      	ldrb	r3, [r7, #0]
{
 8001050:	0004      	movs	r4, r0
 8001052:	000d      	movs	r5, r1
 8001054:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001056:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001058:	2b20      	cmp	r3, #32
 800105a:	d146      	bne.n	80010ea <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800105c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800105e:	2900      	cmp	r1, #0
 8001060:	d043      	beq.n	80010ea <HAL_UART_Transmit+0xa6>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d041      	beq.n	80010ea <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	68a2      	ldr	r2, [r4, #8]
 800106a:	015b      	lsls	r3, r3, #5
 800106c:	429a      	cmp	r2, r3
 800106e:	d104      	bne.n	800107a <HAL_UART_Transmit+0x36>
 8001070:	6923      	ldr	r3, [r4, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001076:	4201      	tst	r1, r0
 8001078:	d137      	bne.n	80010ea <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800107a:	0023      	movs	r3, r4
 800107c:	3368      	adds	r3, #104	; 0x68
 800107e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001080:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001082:	2a01      	cmp	r2, #1
 8001084:	d031      	beq.n	80010ea <HAL_UART_Transmit+0xa6>
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108a:	2300      	movs	r3, #0
 800108c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800108e:	3321      	adds	r3, #33	; 0x21
 8001090:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001092:	f7ff fa91 	bl	80005b8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001096:	0023      	movs	r3, r4
 8001098:	3350      	adds	r3, #80	; 0x50
 800109a:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800109c:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800109e:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 80010a0:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010a2:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 80010a4:	0021      	movs	r1, r4
 80010a6:	3152      	adds	r1, #82	; 0x52
 80010a8:	880a      	ldrh	r2, [r1, #0]
 80010aa:	b292      	uxth	r2, r2
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d10d      	bne.n	80010cc <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010b0:	9b03      	ldr	r3, [sp, #12]
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	0020      	movs	r0, r4
 80010b8:	9b02      	ldr	r3, [sp, #8]
 80010ba:	f7ff ff91 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d112      	bne.n	80010e8 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80010c2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80010c4:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80010c6:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 80010c8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80010ca:	e00e      	b.n	80010ea <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80010cc:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ce:	2200      	movs	r2, #0
      huart->TxXferCount--;
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010d6:	9b03      	ldr	r3, [sp, #12]
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	0020      	movs	r0, r4
 80010de:	9b02      	ldr	r3, [sp, #8]
 80010e0:	f7ff ff7e 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d002      	beq.n	80010ee <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80010e8:	2003      	movs	r0, #3
}
 80010ea:	b005      	add	sp, #20
 80010ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	42b3      	cmp	r3, r6
 80010f4:	d108      	bne.n	8001108 <HAL_UART_Transmit+0xc4>
 80010f6:	6923      	ldr	r3, [r4, #16]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80010fc:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80010fe:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	0ddb      	lsrs	r3, r3, #23
 8001104:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8001106:	e7cd      	b.n	80010a4 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001108:	782b      	ldrb	r3, [r5, #0]
 800110a:	3501      	adds	r5, #1
 800110c:	8513      	strh	r3, [r2, #40]	; 0x28
 800110e:	e7c9      	b.n	80010a4 <HAL_UART_Transmit+0x60>

08001110 <__errno>:
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <__errno+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	4770      	bx	lr
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000004 	.word	0x20000004

0800111c <__libc_init_array>:
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	2600      	movs	r6, #0
 8001120:	4d0c      	ldr	r5, [pc, #48]	; (8001154 <__libc_init_array+0x38>)
 8001122:	4c0d      	ldr	r4, [pc, #52]	; (8001158 <__libc_init_array+0x3c>)
 8001124:	1b64      	subs	r4, r4, r5
 8001126:	10a4      	asrs	r4, r4, #2
 8001128:	42a6      	cmp	r6, r4
 800112a:	d109      	bne.n	8001140 <__libc_init_array+0x24>
 800112c:	2600      	movs	r6, #0
 800112e:	f000 ff5d 	bl	8001fec <_init>
 8001132:	4d0a      	ldr	r5, [pc, #40]	; (800115c <__libc_init_array+0x40>)
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <__libc_init_array+0x44>)
 8001136:	1b64      	subs	r4, r4, r5
 8001138:	10a4      	asrs	r4, r4, #2
 800113a:	42a6      	cmp	r6, r4
 800113c:	d105      	bne.n	800114a <__libc_init_array+0x2e>
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	00b3      	lsls	r3, r6, #2
 8001142:	58eb      	ldr	r3, [r5, r3]
 8001144:	4798      	blx	r3
 8001146:	3601      	adds	r6, #1
 8001148:	e7ee      	b.n	8001128 <__libc_init_array+0xc>
 800114a:	00b3      	lsls	r3, r6, #2
 800114c:	58eb      	ldr	r3, [r5, r3]
 800114e:	4798      	blx	r3
 8001150:	3601      	adds	r6, #1
 8001152:	e7f2      	b.n	800113a <__libc_init_array+0x1e>
 8001154:	080020ec 	.word	0x080020ec
 8001158:	080020ec 	.word	0x080020ec
 800115c:	080020ec 	.word	0x080020ec
 8001160:	080020f0 	.word	0x080020f0

08001164 <memcpy>:
 8001164:	2300      	movs	r3, #0
 8001166:	b510      	push	{r4, lr}
 8001168:	429a      	cmp	r2, r3
 800116a:	d100      	bne.n	800116e <memcpy+0xa>
 800116c:	bd10      	pop	{r4, pc}
 800116e:	5ccc      	ldrb	r4, [r1, r3]
 8001170:	54c4      	strb	r4, [r0, r3]
 8001172:	3301      	adds	r3, #1
 8001174:	e7f8      	b.n	8001168 <memcpy+0x4>

08001176 <memset>:
 8001176:	0003      	movs	r3, r0
 8001178:	1882      	adds	r2, r0, r2
 800117a:	4293      	cmp	r3, r2
 800117c:	d100      	bne.n	8001180 <memset+0xa>
 800117e:	4770      	bx	lr
 8001180:	7019      	strb	r1, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	e7f9      	b.n	800117a <memset+0x4>
	...

08001188 <iprintf>:
 8001188:	b40f      	push	{r0, r1, r2, r3}
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <iprintf+0x30>)
 800118c:	b513      	push	{r0, r1, r4, lr}
 800118e:	681c      	ldr	r4, [r3, #0]
 8001190:	2c00      	cmp	r4, #0
 8001192:	d005      	beq.n	80011a0 <iprintf+0x18>
 8001194:	69a3      	ldr	r3, [r4, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <iprintf+0x18>
 800119a:	0020      	movs	r0, r4
 800119c:	f000 f850 	bl	8001240 <__sinit>
 80011a0:	ab05      	add	r3, sp, #20
 80011a2:	9a04      	ldr	r2, [sp, #16]
 80011a4:	68a1      	ldr	r1, [r4, #8]
 80011a6:	0020      	movs	r0, r4
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f000 f965 	bl	8001478 <_vfiprintf_r>
 80011ae:	bc16      	pop	{r1, r2, r4}
 80011b0:	bc08      	pop	{r3}
 80011b2:	b004      	add	sp, #16
 80011b4:	4718      	bx	r3
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000004 	.word	0x20000004

080011bc <_cleanup_r>:
 80011bc:	b510      	push	{r4, lr}
 80011be:	4902      	ldr	r1, [pc, #8]	; (80011c8 <_cleanup_r+0xc>)
 80011c0:	f000 f8b2 	bl	8001328 <_fwalk_reent>
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	08001d75 	.word	0x08001d75

080011cc <std.isra.0>:
 80011cc:	2300      	movs	r3, #0
 80011ce:	b510      	push	{r4, lr}
 80011d0:	0004      	movs	r4, r0
 80011d2:	6003      	str	r3, [r0, #0]
 80011d4:	6043      	str	r3, [r0, #4]
 80011d6:	6083      	str	r3, [r0, #8]
 80011d8:	8181      	strh	r1, [r0, #12]
 80011da:	6643      	str	r3, [r0, #100]	; 0x64
 80011dc:	81c2      	strh	r2, [r0, #14]
 80011de:	6103      	str	r3, [r0, #16]
 80011e0:	6143      	str	r3, [r0, #20]
 80011e2:	6183      	str	r3, [r0, #24]
 80011e4:	0019      	movs	r1, r3
 80011e6:	2208      	movs	r2, #8
 80011e8:	305c      	adds	r0, #92	; 0x5c
 80011ea:	f7ff ffc4 	bl	8001176 <memset>
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <std.isra.0+0x38>)
 80011f0:	6224      	str	r4, [r4, #32]
 80011f2:	6263      	str	r3, [r4, #36]	; 0x24
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <std.isra.0+0x3c>)
 80011f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <std.isra.0+0x40>)
 80011fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <std.isra.0+0x44>)
 80011fe:	6323      	str	r3, [r4, #48]	; 0x30
 8001200:	bd10      	pop	{r4, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	080019e5 	.word	0x080019e5
 8001208:	08001a0d 	.word	0x08001a0d
 800120c:	08001a45 	.word	0x08001a45
 8001210:	08001a71 	.word	0x08001a71

08001214 <__sfmoreglue>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2568      	movs	r5, #104	; 0x68
 8001218:	1e4a      	subs	r2, r1, #1
 800121a:	4355      	muls	r5, r2
 800121c:	000e      	movs	r6, r1
 800121e:	0029      	movs	r1, r5
 8001220:	3174      	adds	r1, #116	; 0x74
 8001222:	f000 f8a3 	bl	800136c <_malloc_r>
 8001226:	1e04      	subs	r4, r0, #0
 8001228:	d008      	beq.n	800123c <__sfmoreglue+0x28>
 800122a:	2100      	movs	r1, #0
 800122c:	002a      	movs	r2, r5
 800122e:	6001      	str	r1, [r0, #0]
 8001230:	6046      	str	r6, [r0, #4]
 8001232:	300c      	adds	r0, #12
 8001234:	60a0      	str	r0, [r4, #8]
 8001236:	3268      	adds	r2, #104	; 0x68
 8001238:	f7ff ff9d 	bl	8001176 <memset>
 800123c:	0020      	movs	r0, r4
 800123e:	bd70      	pop	{r4, r5, r6, pc}

08001240 <__sinit>:
 8001240:	6983      	ldr	r3, [r0, #24]
 8001242:	b513      	push	{r0, r1, r4, lr}
 8001244:	0004      	movs	r4, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d128      	bne.n	800129c <__sinit+0x5c>
 800124a:	6483      	str	r3, [r0, #72]	; 0x48
 800124c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800124e:	6503      	str	r3, [r0, #80]	; 0x50
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <__sinit+0x60>)
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <__sinit+0x64>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6282      	str	r2, [r0, #40]	; 0x28
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4298      	cmp	r0, r3
 800125c:	d101      	bne.n	8001262 <__sinit+0x22>
 800125e:	2301      	movs	r3, #1
 8001260:	6183      	str	r3, [r0, #24]
 8001262:	0020      	movs	r0, r4
 8001264:	f000 f820 	bl	80012a8 <__sfp>
 8001268:	6060      	str	r0, [r4, #4]
 800126a:	0020      	movs	r0, r4
 800126c:	f000 f81c 	bl	80012a8 <__sfp>
 8001270:	60a0      	str	r0, [r4, #8]
 8001272:	0020      	movs	r0, r4
 8001274:	f000 f818 	bl	80012a8 <__sfp>
 8001278:	2200      	movs	r2, #0
 800127a:	60e0      	str	r0, [r4, #12]
 800127c:	2104      	movs	r1, #4
 800127e:	6860      	ldr	r0, [r4, #4]
 8001280:	f7ff ffa4 	bl	80011cc <std.isra.0>
 8001284:	2201      	movs	r2, #1
 8001286:	2109      	movs	r1, #9
 8001288:	68a0      	ldr	r0, [r4, #8]
 800128a:	f7ff ff9f 	bl	80011cc <std.isra.0>
 800128e:	2202      	movs	r2, #2
 8001290:	2112      	movs	r1, #18
 8001292:	68e0      	ldr	r0, [r4, #12]
 8001294:	f7ff ff9a 	bl	80011cc <std.isra.0>
 8001298:	2301      	movs	r3, #1
 800129a:	61a3      	str	r3, [r4, #24]
 800129c:	bd13      	pop	{r0, r1, r4, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	08002054 	.word	0x08002054
 80012a4:	080011bd 	.word	0x080011bd

080012a8 <__sfp>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <__sfp+0x7c>)
 80012ac:	0007      	movs	r7, r0
 80012ae:	681e      	ldr	r6, [r3, #0]
 80012b0:	69b3      	ldr	r3, [r6, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <__sfp+0x14>
 80012b6:	0030      	movs	r0, r6
 80012b8:	f7ff ffc2 	bl	8001240 <__sinit>
 80012bc:	3648      	adds	r6, #72	; 0x48
 80012be:	68b4      	ldr	r4, [r6, #8]
 80012c0:	6873      	ldr	r3, [r6, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	d504      	bpl.n	80012d0 <__sfp+0x28>
 80012c6:	6833      	ldr	r3, [r6, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <__sfp+0x34>
 80012cc:	6836      	ldr	r6, [r6, #0]
 80012ce:	e7f6      	b.n	80012be <__sfp+0x16>
 80012d0:	220c      	movs	r2, #12
 80012d2:	5ea5      	ldrsh	r5, [r4, r2]
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	d00d      	beq.n	80012f4 <__sfp+0x4c>
 80012d8:	3468      	adds	r4, #104	; 0x68
 80012da:	e7f2      	b.n	80012c2 <__sfp+0x1a>
 80012dc:	2104      	movs	r1, #4
 80012de:	0038      	movs	r0, r7
 80012e0:	f7ff ff98 	bl	8001214 <__sfmoreglue>
 80012e4:	6030      	str	r0, [r6, #0]
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d1f0      	bne.n	80012cc <__sfp+0x24>
 80012ea:	230c      	movs	r3, #12
 80012ec:	0004      	movs	r4, r0
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	0020      	movs	r0, r4
 80012f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012f4:	2301      	movs	r3, #1
 80012f6:	0020      	movs	r0, r4
 80012f8:	425b      	negs	r3, r3
 80012fa:	81e3      	strh	r3, [r4, #14]
 80012fc:	3302      	adds	r3, #2
 80012fe:	81a3      	strh	r3, [r4, #12]
 8001300:	6665      	str	r5, [r4, #100]	; 0x64
 8001302:	6025      	str	r5, [r4, #0]
 8001304:	60a5      	str	r5, [r4, #8]
 8001306:	6065      	str	r5, [r4, #4]
 8001308:	6125      	str	r5, [r4, #16]
 800130a:	6165      	str	r5, [r4, #20]
 800130c:	61a5      	str	r5, [r4, #24]
 800130e:	2208      	movs	r2, #8
 8001310:	0029      	movs	r1, r5
 8001312:	305c      	adds	r0, #92	; 0x5c
 8001314:	f7ff ff2f 	bl	8001176 <memset>
 8001318:	6365      	str	r5, [r4, #52]	; 0x34
 800131a:	63a5      	str	r5, [r4, #56]	; 0x38
 800131c:	64a5      	str	r5, [r4, #72]	; 0x48
 800131e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001320:	e7e6      	b.n	80012f0 <__sfp+0x48>
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	08002054 	.word	0x08002054

08001328 <_fwalk_reent>:
 8001328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800132a:	0004      	movs	r4, r0
 800132c:	0007      	movs	r7, r0
 800132e:	2600      	movs	r6, #0
 8001330:	9101      	str	r1, [sp, #4]
 8001332:	3448      	adds	r4, #72	; 0x48
 8001334:	2c00      	cmp	r4, #0
 8001336:	d101      	bne.n	800133c <_fwalk_reent+0x14>
 8001338:	0030      	movs	r0, r6
 800133a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800133c:	6863      	ldr	r3, [r4, #4]
 800133e:	68a5      	ldr	r5, [r4, #8]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	d501      	bpl.n	800134e <_fwalk_reent+0x26>
 800134a:	6824      	ldr	r4, [r4, #0]
 800134c:	e7f2      	b.n	8001334 <_fwalk_reent+0xc>
 800134e:	89ab      	ldrh	r3, [r5, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d908      	bls.n	8001366 <_fwalk_reent+0x3e>
 8001354:	220e      	movs	r2, #14
 8001356:	5eab      	ldrsh	r3, [r5, r2]
 8001358:	3301      	adds	r3, #1
 800135a:	d004      	beq.n	8001366 <_fwalk_reent+0x3e>
 800135c:	0029      	movs	r1, r5
 800135e:	0038      	movs	r0, r7
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	4798      	blx	r3
 8001364:	4306      	orrs	r6, r0
 8001366:	3568      	adds	r5, #104	; 0x68
 8001368:	e7eb      	b.n	8001342 <_fwalk_reent+0x1a>
	...

0800136c <_malloc_r>:
 800136c:	2303      	movs	r3, #3
 800136e:	b570      	push	{r4, r5, r6, lr}
 8001370:	1ccd      	adds	r5, r1, #3
 8001372:	439d      	bics	r5, r3
 8001374:	3508      	adds	r5, #8
 8001376:	0006      	movs	r6, r0
 8001378:	2d0c      	cmp	r5, #12
 800137a:	d21e      	bcs.n	80013ba <_malloc_r+0x4e>
 800137c:	250c      	movs	r5, #12
 800137e:	42a9      	cmp	r1, r5
 8001380:	d81d      	bhi.n	80013be <_malloc_r+0x52>
 8001382:	0030      	movs	r0, r6
 8001384:	f000 fdad 	bl	8001ee2 <__malloc_lock>
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <_malloc_r+0xb4>)
 800138a:	6814      	ldr	r4, [r2, #0]
 800138c:	0021      	movs	r1, r4
 800138e:	2900      	cmp	r1, #0
 8001390:	d119      	bne.n	80013c6 <_malloc_r+0x5a>
 8001392:	4c24      	ldr	r4, [pc, #144]	; (8001424 <_malloc_r+0xb8>)
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <_malloc_r+0x36>
 800139a:	0030      	movs	r0, r6
 800139c:	f000 fb10 	bl	80019c0 <_sbrk_r>
 80013a0:	6020      	str	r0, [r4, #0]
 80013a2:	0029      	movs	r1, r5
 80013a4:	0030      	movs	r0, r6
 80013a6:	f000 fb0b 	bl	80019c0 <_sbrk_r>
 80013aa:	1c43      	adds	r3, r0, #1
 80013ac:	d12c      	bne.n	8001408 <_malloc_r+0x9c>
 80013ae:	230c      	movs	r3, #12
 80013b0:	0030      	movs	r0, r6
 80013b2:	6033      	str	r3, [r6, #0]
 80013b4:	f000 fd96 	bl	8001ee4 <__malloc_unlock>
 80013b8:	e003      	b.n	80013c2 <_malloc_r+0x56>
 80013ba:	2d00      	cmp	r5, #0
 80013bc:	dadf      	bge.n	800137e <_malloc_r+0x12>
 80013be:	230c      	movs	r3, #12
 80013c0:	6033      	str	r3, [r6, #0]
 80013c2:	2000      	movs	r0, #0
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
 80013c6:	680b      	ldr	r3, [r1, #0]
 80013c8:	1b5b      	subs	r3, r3, r5
 80013ca:	d41a      	bmi.n	8001402 <_malloc_r+0x96>
 80013cc:	2b0b      	cmp	r3, #11
 80013ce:	d903      	bls.n	80013d8 <_malloc_r+0x6c>
 80013d0:	600b      	str	r3, [r1, #0]
 80013d2:	18cc      	adds	r4, r1, r3
 80013d4:	6025      	str	r5, [r4, #0]
 80013d6:	e003      	b.n	80013e0 <_malloc_r+0x74>
 80013d8:	428c      	cmp	r4, r1
 80013da:	d10e      	bne.n	80013fa <_malloc_r+0x8e>
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	0030      	movs	r0, r6
 80013e2:	f000 fd7f 	bl	8001ee4 <__malloc_unlock>
 80013e6:	0020      	movs	r0, r4
 80013e8:	2207      	movs	r2, #7
 80013ea:	300b      	adds	r0, #11
 80013ec:	1d23      	adds	r3, r4, #4
 80013ee:	4390      	bics	r0, r2
 80013f0:	1ac3      	subs	r3, r0, r3
 80013f2:	d0e7      	beq.n	80013c4 <_malloc_r+0x58>
 80013f4:	425a      	negs	r2, r3
 80013f6:	50e2      	str	r2, [r4, r3]
 80013f8:	e7e4      	b.n	80013c4 <_malloc_r+0x58>
 80013fa:	684b      	ldr	r3, [r1, #4]
 80013fc:	6063      	str	r3, [r4, #4]
 80013fe:	000c      	movs	r4, r1
 8001400:	e7ee      	b.n	80013e0 <_malloc_r+0x74>
 8001402:	000c      	movs	r4, r1
 8001404:	6849      	ldr	r1, [r1, #4]
 8001406:	e7c2      	b.n	800138e <_malloc_r+0x22>
 8001408:	2303      	movs	r3, #3
 800140a:	1cc4      	adds	r4, r0, #3
 800140c:	439c      	bics	r4, r3
 800140e:	42a0      	cmp	r0, r4
 8001410:	d0e0      	beq.n	80013d4 <_malloc_r+0x68>
 8001412:	1a21      	subs	r1, r4, r0
 8001414:	0030      	movs	r0, r6
 8001416:	f000 fad3 	bl	80019c0 <_sbrk_r>
 800141a:	1c43      	adds	r3, r0, #1
 800141c:	d1da      	bne.n	80013d4 <_malloc_r+0x68>
 800141e:	e7c6      	b.n	80013ae <_malloc_r+0x42>
 8001420:	20000088 	.word	0x20000088
 8001424:	2000008c 	.word	0x2000008c

08001428 <__sfputc_r>:
 8001428:	6893      	ldr	r3, [r2, #8]
 800142a:	b510      	push	{r4, lr}
 800142c:	3b01      	subs	r3, #1
 800142e:	6093      	str	r3, [r2, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da05      	bge.n	8001440 <__sfputc_r+0x18>
 8001434:	6994      	ldr	r4, [r2, #24]
 8001436:	42a3      	cmp	r3, r4
 8001438:	db08      	blt.n	800144c <__sfputc_r+0x24>
 800143a:	b2cb      	uxtb	r3, r1
 800143c:	2b0a      	cmp	r3, #10
 800143e:	d005      	beq.n	800144c <__sfputc_r+0x24>
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	1c58      	adds	r0, r3, #1
 8001444:	6010      	str	r0, [r2, #0]
 8001446:	7019      	strb	r1, [r3, #0]
 8001448:	b2c8      	uxtb	r0, r1
 800144a:	bd10      	pop	{r4, pc}
 800144c:	f000 fb16 	bl	8001a7c <__swbuf_r>
 8001450:	e7fb      	b.n	800144a <__sfputc_r+0x22>

08001452 <__sfputs_r>:
 8001452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001454:	0006      	movs	r6, r0
 8001456:	000f      	movs	r7, r1
 8001458:	0014      	movs	r4, r2
 800145a:	18d5      	adds	r5, r2, r3
 800145c:	42ac      	cmp	r4, r5
 800145e:	d101      	bne.n	8001464 <__sfputs_r+0x12>
 8001460:	2000      	movs	r0, #0
 8001462:	e007      	b.n	8001474 <__sfputs_r+0x22>
 8001464:	7821      	ldrb	r1, [r4, #0]
 8001466:	003a      	movs	r2, r7
 8001468:	0030      	movs	r0, r6
 800146a:	f7ff ffdd 	bl	8001428 <__sfputc_r>
 800146e:	3401      	adds	r4, #1
 8001470:	1c43      	adds	r3, r0, #1
 8001472:	d1f3      	bne.n	800145c <__sfputs_r+0xa>
 8001474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001478 <_vfiprintf_r>:
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b09f      	sub	sp, #124	; 0x7c
 800147c:	0006      	movs	r6, r0
 800147e:	000f      	movs	r7, r1
 8001480:	0014      	movs	r4, r2
 8001482:	9305      	str	r3, [sp, #20]
 8001484:	2800      	cmp	r0, #0
 8001486:	d004      	beq.n	8001492 <_vfiprintf_r+0x1a>
 8001488:	6983      	ldr	r3, [r0, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <_vfiprintf_r+0x1a>
 800148e:	f7ff fed7 	bl	8001240 <__sinit>
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <_vfiprintf_r+0x218>)
 8001494:	429f      	cmp	r7, r3
 8001496:	d15c      	bne.n	8001552 <_vfiprintf_r+0xda>
 8001498:	6877      	ldr	r7, [r6, #4]
 800149a:	89bb      	ldrh	r3, [r7, #12]
 800149c:	071b      	lsls	r3, r3, #28
 800149e:	d562      	bpl.n	8001566 <_vfiprintf_r+0xee>
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d05f      	beq.n	8001566 <_vfiprintf_r+0xee>
 80014a6:	2300      	movs	r3, #0
 80014a8:	ad06      	add	r5, sp, #24
 80014aa:	616b      	str	r3, [r5, #20]
 80014ac:	3320      	adds	r3, #32
 80014ae:	766b      	strb	r3, [r5, #25]
 80014b0:	3310      	adds	r3, #16
 80014b2:	76ab      	strb	r3, [r5, #26]
 80014b4:	9402      	str	r4, [sp, #8]
 80014b6:	9c02      	ldr	r4, [sp, #8]
 80014b8:	7823      	ldrb	r3, [r4, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d15d      	bne.n	800157a <_vfiprintf_r+0x102>
 80014be:	9b02      	ldr	r3, [sp, #8]
 80014c0:	1ae3      	subs	r3, r4, r3
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	d00d      	beq.n	80014e2 <_vfiprintf_r+0x6a>
 80014c6:	9b04      	ldr	r3, [sp, #16]
 80014c8:	9a02      	ldr	r2, [sp, #8]
 80014ca:	0039      	movs	r1, r7
 80014cc:	0030      	movs	r0, r6
 80014ce:	f7ff ffc0 	bl	8001452 <__sfputs_r>
 80014d2:	1c43      	adds	r3, r0, #1
 80014d4:	d100      	bne.n	80014d8 <_vfiprintf_r+0x60>
 80014d6:	e0cc      	b.n	8001672 <_vfiprintf_r+0x1fa>
 80014d8:	696a      	ldr	r2, [r5, #20]
 80014da:	9b04      	ldr	r3, [sp, #16]
 80014dc:	4694      	mov	ip, r2
 80014de:	4463      	add	r3, ip
 80014e0:	616b      	str	r3, [r5, #20]
 80014e2:	7823      	ldrb	r3, [r4, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d100      	bne.n	80014ea <_vfiprintf_r+0x72>
 80014e8:	e0c3      	b.n	8001672 <_vfiprintf_r+0x1fa>
 80014ea:	2201      	movs	r2, #1
 80014ec:	2300      	movs	r3, #0
 80014ee:	4252      	negs	r2, r2
 80014f0:	606a      	str	r2, [r5, #4]
 80014f2:	a902      	add	r1, sp, #8
 80014f4:	3254      	adds	r2, #84	; 0x54
 80014f6:	1852      	adds	r2, r2, r1
 80014f8:	3401      	adds	r4, #1
 80014fa:	602b      	str	r3, [r5, #0]
 80014fc:	60eb      	str	r3, [r5, #12]
 80014fe:	60ab      	str	r3, [r5, #8]
 8001500:	7013      	strb	r3, [r2, #0]
 8001502:	65ab      	str	r3, [r5, #88]	; 0x58
 8001504:	7821      	ldrb	r1, [r4, #0]
 8001506:	2205      	movs	r2, #5
 8001508:	4862      	ldr	r0, [pc, #392]	; (8001694 <_vfiprintf_r+0x21c>)
 800150a:	f000 fcdf 	bl	8001ecc <memchr>
 800150e:	1c63      	adds	r3, r4, #1
 8001510:	469c      	mov	ip, r3
 8001512:	2800      	cmp	r0, #0
 8001514:	d135      	bne.n	8001582 <_vfiprintf_r+0x10a>
 8001516:	6829      	ldr	r1, [r5, #0]
 8001518:	06cb      	lsls	r3, r1, #27
 800151a:	d504      	bpl.n	8001526 <_vfiprintf_r+0xae>
 800151c:	2353      	movs	r3, #83	; 0x53
 800151e:	aa02      	add	r2, sp, #8
 8001520:	3020      	adds	r0, #32
 8001522:	189b      	adds	r3, r3, r2
 8001524:	7018      	strb	r0, [r3, #0]
 8001526:	070b      	lsls	r3, r1, #28
 8001528:	d504      	bpl.n	8001534 <_vfiprintf_r+0xbc>
 800152a:	2353      	movs	r3, #83	; 0x53
 800152c:	202b      	movs	r0, #43	; 0x2b
 800152e:	aa02      	add	r2, sp, #8
 8001530:	189b      	adds	r3, r3, r2
 8001532:	7018      	strb	r0, [r3, #0]
 8001534:	7823      	ldrb	r3, [r4, #0]
 8001536:	2b2a      	cmp	r3, #42	; 0x2a
 8001538:	d02c      	beq.n	8001594 <_vfiprintf_r+0x11c>
 800153a:	2000      	movs	r0, #0
 800153c:	210a      	movs	r1, #10
 800153e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001540:	7822      	ldrb	r2, [r4, #0]
 8001542:	3a30      	subs	r2, #48	; 0x30
 8001544:	2a09      	cmp	r2, #9
 8001546:	d800      	bhi.n	800154a <_vfiprintf_r+0xd2>
 8001548:	e06b      	b.n	8001622 <_vfiprintf_r+0x1aa>
 800154a:	2800      	cmp	r0, #0
 800154c:	d02a      	beq.n	80015a4 <_vfiprintf_r+0x12c>
 800154e:	9309      	str	r3, [sp, #36]	; 0x24
 8001550:	e028      	b.n	80015a4 <_vfiprintf_r+0x12c>
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <_vfiprintf_r+0x220>)
 8001554:	429f      	cmp	r7, r3
 8001556:	d101      	bne.n	800155c <_vfiprintf_r+0xe4>
 8001558:	68b7      	ldr	r7, [r6, #8]
 800155a:	e79e      	b.n	800149a <_vfiprintf_r+0x22>
 800155c:	4b4f      	ldr	r3, [pc, #316]	; (800169c <_vfiprintf_r+0x224>)
 800155e:	429f      	cmp	r7, r3
 8001560:	d19b      	bne.n	800149a <_vfiprintf_r+0x22>
 8001562:	68f7      	ldr	r7, [r6, #12]
 8001564:	e799      	b.n	800149a <_vfiprintf_r+0x22>
 8001566:	0039      	movs	r1, r7
 8001568:	0030      	movs	r0, r6
 800156a:	f000 faf1 	bl	8001b50 <__swsetup_r>
 800156e:	2800      	cmp	r0, #0
 8001570:	d099      	beq.n	80014a6 <_vfiprintf_r+0x2e>
 8001572:	2001      	movs	r0, #1
 8001574:	4240      	negs	r0, r0
 8001576:	b01f      	add	sp, #124	; 0x7c
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157a:	2b25      	cmp	r3, #37	; 0x25
 800157c:	d09f      	beq.n	80014be <_vfiprintf_r+0x46>
 800157e:	3401      	adds	r4, #1
 8001580:	e79a      	b.n	80014b8 <_vfiprintf_r+0x40>
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <_vfiprintf_r+0x21c>)
 8001584:	6829      	ldr	r1, [r5, #0]
 8001586:	1ac0      	subs	r0, r0, r3
 8001588:	2301      	movs	r3, #1
 800158a:	4083      	lsls	r3, r0
 800158c:	430b      	orrs	r3, r1
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	4664      	mov	r4, ip
 8001592:	e7b7      	b.n	8001504 <_vfiprintf_r+0x8c>
 8001594:	9b05      	ldr	r3, [sp, #20]
 8001596:	1d18      	adds	r0, r3, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	9005      	str	r0, [sp, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db3a      	blt.n	8001616 <_vfiprintf_r+0x19e>
 80015a0:	9309      	str	r3, [sp, #36]	; 0x24
 80015a2:	4664      	mov	r4, ip
 80015a4:	7823      	ldrb	r3, [r4, #0]
 80015a6:	2b2e      	cmp	r3, #46	; 0x2e
 80015a8:	d10b      	bne.n	80015c2 <_vfiprintf_r+0x14a>
 80015aa:	7863      	ldrb	r3, [r4, #1]
 80015ac:	1c62      	adds	r2, r4, #1
 80015ae:	2b2a      	cmp	r3, #42	; 0x2a
 80015b0:	d13f      	bne.n	8001632 <_vfiprintf_r+0x1ba>
 80015b2:	9b05      	ldr	r3, [sp, #20]
 80015b4:	3402      	adds	r4, #2
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	9205      	str	r2, [sp, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db35      	blt.n	800162c <_vfiprintf_r+0x1b4>
 80015c0:	9307      	str	r3, [sp, #28]
 80015c2:	7821      	ldrb	r1, [r4, #0]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4836      	ldr	r0, [pc, #216]	; (80016a0 <_vfiprintf_r+0x228>)
 80015c8:	f000 fc80 	bl	8001ecc <memchr>
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d007      	beq.n	80015e0 <_vfiprintf_r+0x168>
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <_vfiprintf_r+0x228>)
 80015d2:	682a      	ldr	r2, [r5, #0]
 80015d4:	1ac0      	subs	r0, r0, r3
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	4083      	lsls	r3, r0
 80015da:	4313      	orrs	r3, r2
 80015dc:	602b      	str	r3, [r5, #0]
 80015de:	3401      	adds	r4, #1
 80015e0:	7821      	ldrb	r1, [r4, #0]
 80015e2:	1c63      	adds	r3, r4, #1
 80015e4:	2206      	movs	r2, #6
 80015e6:	482f      	ldr	r0, [pc, #188]	; (80016a4 <_vfiprintf_r+0x22c>)
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	7629      	strb	r1, [r5, #24]
 80015ec:	f000 fc6e 	bl	8001ecc <memchr>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d044      	beq.n	800167e <_vfiprintf_r+0x206>
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <_vfiprintf_r+0x230>)
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12f      	bne.n	800165a <_vfiprintf_r+0x1e2>
 80015fa:	6829      	ldr	r1, [r5, #0]
 80015fc:	9b05      	ldr	r3, [sp, #20]
 80015fe:	2207      	movs	r2, #7
 8001600:	05c9      	lsls	r1, r1, #23
 8001602:	d528      	bpl.n	8001656 <_vfiprintf_r+0x1de>
 8001604:	189b      	adds	r3, r3, r2
 8001606:	4393      	bics	r3, r2
 8001608:	3308      	adds	r3, #8
 800160a:	9305      	str	r3, [sp, #20]
 800160c:	696b      	ldr	r3, [r5, #20]
 800160e:	9a03      	ldr	r2, [sp, #12]
 8001610:	189b      	adds	r3, r3, r2
 8001612:	616b      	str	r3, [r5, #20]
 8001614:	e74f      	b.n	80014b6 <_vfiprintf_r+0x3e>
 8001616:	425b      	negs	r3, r3
 8001618:	60eb      	str	r3, [r5, #12]
 800161a:	2302      	movs	r3, #2
 800161c:	430b      	orrs	r3, r1
 800161e:	602b      	str	r3, [r5, #0]
 8001620:	e7bf      	b.n	80015a2 <_vfiprintf_r+0x12a>
 8001622:	434b      	muls	r3, r1
 8001624:	3401      	adds	r4, #1
 8001626:	189b      	adds	r3, r3, r2
 8001628:	2001      	movs	r0, #1
 800162a:	e789      	b.n	8001540 <_vfiprintf_r+0xc8>
 800162c:	2301      	movs	r3, #1
 800162e:	425b      	negs	r3, r3
 8001630:	e7c6      	b.n	80015c0 <_vfiprintf_r+0x148>
 8001632:	2300      	movs	r3, #0
 8001634:	0014      	movs	r4, r2
 8001636:	200a      	movs	r0, #10
 8001638:	001a      	movs	r2, r3
 800163a:	606b      	str	r3, [r5, #4]
 800163c:	7821      	ldrb	r1, [r4, #0]
 800163e:	3930      	subs	r1, #48	; 0x30
 8001640:	2909      	cmp	r1, #9
 8001642:	d903      	bls.n	800164c <_vfiprintf_r+0x1d4>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0bc      	beq.n	80015c2 <_vfiprintf_r+0x14a>
 8001648:	9207      	str	r2, [sp, #28]
 800164a:	e7ba      	b.n	80015c2 <_vfiprintf_r+0x14a>
 800164c:	4342      	muls	r2, r0
 800164e:	3401      	adds	r4, #1
 8001650:	1852      	adds	r2, r2, r1
 8001652:	2301      	movs	r3, #1
 8001654:	e7f2      	b.n	800163c <_vfiprintf_r+0x1c4>
 8001656:	3307      	adds	r3, #7
 8001658:	e7d5      	b.n	8001606 <_vfiprintf_r+0x18e>
 800165a:	ab05      	add	r3, sp, #20
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	003a      	movs	r2, r7
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <_vfiprintf_r+0x234>)
 8001662:	0029      	movs	r1, r5
 8001664:	0030      	movs	r0, r6
 8001666:	e000      	b.n	800166a <_vfiprintf_r+0x1f2>
 8001668:	bf00      	nop
 800166a:	9003      	str	r0, [sp, #12]
 800166c:	9b03      	ldr	r3, [sp, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	d1cc      	bne.n	800160c <_vfiprintf_r+0x194>
 8001672:	89bb      	ldrh	r3, [r7, #12]
 8001674:	065b      	lsls	r3, r3, #25
 8001676:	d500      	bpl.n	800167a <_vfiprintf_r+0x202>
 8001678:	e77b      	b.n	8001572 <_vfiprintf_r+0xfa>
 800167a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800167c:	e77b      	b.n	8001576 <_vfiprintf_r+0xfe>
 800167e:	ab05      	add	r3, sp, #20
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	003a      	movs	r2, r7
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <_vfiprintf_r+0x234>)
 8001686:	0029      	movs	r1, r5
 8001688:	0030      	movs	r0, r6
 800168a:	f000 f87f 	bl	800178c <_printf_i>
 800168e:	e7ec      	b.n	800166a <_vfiprintf_r+0x1f2>
 8001690:	08002078 	.word	0x08002078
 8001694:	080020b8 	.word	0x080020b8
 8001698:	08002098 	.word	0x08002098
 800169c:	08002058 	.word	0x08002058
 80016a0:	080020be 	.word	0x080020be
 80016a4:	080020c2 	.word	0x080020c2
 80016a8:	00000000 	.word	0x00000000
 80016ac:	08001453 	.word	0x08001453

080016b0 <_printf_common>:
 80016b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016b2:	0015      	movs	r5, r2
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	688a      	ldr	r2, [r1, #8]
 80016b8:	690b      	ldr	r3, [r1, #16]
 80016ba:	9000      	str	r0, [sp, #0]
 80016bc:	000c      	movs	r4, r1
 80016be:	4293      	cmp	r3, r2
 80016c0:	da00      	bge.n	80016c4 <_printf_common+0x14>
 80016c2:	0013      	movs	r3, r2
 80016c4:	0022      	movs	r2, r4
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	3243      	adds	r2, #67	; 0x43
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	2a00      	cmp	r2, #0
 80016ce:	d001      	beq.n	80016d4 <_printf_common+0x24>
 80016d0:	3301      	adds	r3, #1
 80016d2:	602b      	str	r3, [r5, #0]
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	069b      	lsls	r3, r3, #26
 80016d8:	d502      	bpl.n	80016e0 <_printf_common+0x30>
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	3302      	adds	r3, #2
 80016de:	602b      	str	r3, [r5, #0]
 80016e0:	2706      	movs	r7, #6
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	401f      	ands	r7, r3
 80016e6:	d027      	beq.n	8001738 <_printf_common+0x88>
 80016e8:	0023      	movs	r3, r4
 80016ea:	3343      	adds	r3, #67	; 0x43
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	4193      	sbcs	r3, r2
 80016f2:	6822      	ldr	r2, [r4, #0]
 80016f4:	0692      	lsls	r2, r2, #26
 80016f6:	d430      	bmi.n	800175a <_printf_common+0xaa>
 80016f8:	0022      	movs	r2, r4
 80016fa:	9901      	ldr	r1, [sp, #4]
 80016fc:	3243      	adds	r2, #67	; 0x43
 80016fe:	9800      	ldr	r0, [sp, #0]
 8001700:	9e08      	ldr	r6, [sp, #32]
 8001702:	47b0      	blx	r6
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	d025      	beq.n	8001754 <_printf_common+0xa4>
 8001708:	2306      	movs	r3, #6
 800170a:	6820      	ldr	r0, [r4, #0]
 800170c:	682a      	ldr	r2, [r5, #0]
 800170e:	68e1      	ldr	r1, [r4, #12]
 8001710:	4003      	ands	r3, r0
 8001712:	2500      	movs	r5, #0
 8001714:	2b04      	cmp	r3, #4
 8001716:	d103      	bne.n	8001720 <_printf_common+0x70>
 8001718:	1a8d      	subs	r5, r1, r2
 800171a:	43eb      	mvns	r3, r5
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	401d      	ands	r5, r3
 8001720:	68a3      	ldr	r3, [r4, #8]
 8001722:	6922      	ldr	r2, [r4, #16]
 8001724:	4293      	cmp	r3, r2
 8001726:	dd01      	ble.n	800172c <_printf_common+0x7c>
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	18ed      	adds	r5, r5, r3
 800172c:	2700      	movs	r7, #0
 800172e:	42bd      	cmp	r5, r7
 8001730:	d120      	bne.n	8001774 <_printf_common+0xc4>
 8001732:	2000      	movs	r0, #0
 8001734:	e010      	b.n	8001758 <_printf_common+0xa8>
 8001736:	3701      	adds	r7, #1
 8001738:	68e3      	ldr	r3, [r4, #12]
 800173a:	682a      	ldr	r2, [r5, #0]
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	429f      	cmp	r7, r3
 8001740:	dad2      	bge.n	80016e8 <_printf_common+0x38>
 8001742:	0022      	movs	r2, r4
 8001744:	2301      	movs	r3, #1
 8001746:	3219      	adds	r2, #25
 8001748:	9901      	ldr	r1, [sp, #4]
 800174a:	9800      	ldr	r0, [sp, #0]
 800174c:	9e08      	ldr	r6, [sp, #32]
 800174e:	47b0      	blx	r6
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d1f0      	bne.n	8001736 <_printf_common+0x86>
 8001754:	2001      	movs	r0, #1
 8001756:	4240      	negs	r0, r0
 8001758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800175a:	2030      	movs	r0, #48	; 0x30
 800175c:	18e1      	adds	r1, r4, r3
 800175e:	3143      	adds	r1, #67	; 0x43
 8001760:	7008      	strb	r0, [r1, #0]
 8001762:	0021      	movs	r1, r4
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	3145      	adds	r1, #69	; 0x45
 8001768:	7809      	ldrb	r1, [r1, #0]
 800176a:	18a2      	adds	r2, r4, r2
 800176c:	3243      	adds	r2, #67	; 0x43
 800176e:	3302      	adds	r3, #2
 8001770:	7011      	strb	r1, [r2, #0]
 8001772:	e7c1      	b.n	80016f8 <_printf_common+0x48>
 8001774:	0022      	movs	r2, r4
 8001776:	2301      	movs	r3, #1
 8001778:	321a      	adds	r2, #26
 800177a:	9901      	ldr	r1, [sp, #4]
 800177c:	9800      	ldr	r0, [sp, #0]
 800177e:	9e08      	ldr	r6, [sp, #32]
 8001780:	47b0      	blx	r6
 8001782:	1c43      	adds	r3, r0, #1
 8001784:	d0e6      	beq.n	8001754 <_printf_common+0xa4>
 8001786:	3701      	adds	r7, #1
 8001788:	e7d1      	b.n	800172e <_printf_common+0x7e>
	...

0800178c <_printf_i>:
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b08b      	sub	sp, #44	; 0x2c
 8001790:	9206      	str	r2, [sp, #24]
 8001792:	000a      	movs	r2, r1
 8001794:	3243      	adds	r2, #67	; 0x43
 8001796:	9307      	str	r3, [sp, #28]
 8001798:	9005      	str	r0, [sp, #20]
 800179a:	9204      	str	r2, [sp, #16]
 800179c:	7e0a      	ldrb	r2, [r1, #24]
 800179e:	000c      	movs	r4, r1
 80017a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80017a2:	2a6e      	cmp	r2, #110	; 0x6e
 80017a4:	d100      	bne.n	80017a8 <_printf_i+0x1c>
 80017a6:	e08f      	b.n	80018c8 <_printf_i+0x13c>
 80017a8:	d817      	bhi.n	80017da <_printf_i+0x4e>
 80017aa:	2a63      	cmp	r2, #99	; 0x63
 80017ac:	d02c      	beq.n	8001808 <_printf_i+0x7c>
 80017ae:	d808      	bhi.n	80017c2 <_printf_i+0x36>
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d100      	bne.n	80017b6 <_printf_i+0x2a>
 80017b4:	e099      	b.n	80018ea <_printf_i+0x15e>
 80017b6:	2a58      	cmp	r2, #88	; 0x58
 80017b8:	d054      	beq.n	8001864 <_printf_i+0xd8>
 80017ba:	0026      	movs	r6, r4
 80017bc:	3642      	adds	r6, #66	; 0x42
 80017be:	7032      	strb	r2, [r6, #0]
 80017c0:	e029      	b.n	8001816 <_printf_i+0x8a>
 80017c2:	2a64      	cmp	r2, #100	; 0x64
 80017c4:	d001      	beq.n	80017ca <_printf_i+0x3e>
 80017c6:	2a69      	cmp	r2, #105	; 0x69
 80017c8:	d1f7      	bne.n	80017ba <_printf_i+0x2e>
 80017ca:	6821      	ldr	r1, [r4, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	0608      	lsls	r0, r1, #24
 80017d0:	d523      	bpl.n	800181a <_printf_i+0x8e>
 80017d2:	1d11      	adds	r1, r2, #4
 80017d4:	6019      	str	r1, [r3, #0]
 80017d6:	6815      	ldr	r5, [r2, #0]
 80017d8:	e025      	b.n	8001826 <_printf_i+0x9a>
 80017da:	2a73      	cmp	r2, #115	; 0x73
 80017dc:	d100      	bne.n	80017e0 <_printf_i+0x54>
 80017de:	e088      	b.n	80018f2 <_printf_i+0x166>
 80017e0:	d808      	bhi.n	80017f4 <_printf_i+0x68>
 80017e2:	2a6f      	cmp	r2, #111	; 0x6f
 80017e4:	d029      	beq.n	800183a <_printf_i+0xae>
 80017e6:	2a70      	cmp	r2, #112	; 0x70
 80017e8:	d1e7      	bne.n	80017ba <_printf_i+0x2e>
 80017ea:	2220      	movs	r2, #32
 80017ec:	6809      	ldr	r1, [r1, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	6022      	str	r2, [r4, #0]
 80017f2:	e003      	b.n	80017fc <_printf_i+0x70>
 80017f4:	2a75      	cmp	r2, #117	; 0x75
 80017f6:	d020      	beq.n	800183a <_printf_i+0xae>
 80017f8:	2a78      	cmp	r2, #120	; 0x78
 80017fa:	d1de      	bne.n	80017ba <_printf_i+0x2e>
 80017fc:	0022      	movs	r2, r4
 80017fe:	2178      	movs	r1, #120	; 0x78
 8001800:	3245      	adds	r2, #69	; 0x45
 8001802:	7011      	strb	r1, [r2, #0]
 8001804:	4a6c      	ldr	r2, [pc, #432]	; (80019b8 <_printf_i+0x22c>)
 8001806:	e030      	b.n	800186a <_printf_i+0xde>
 8001808:	000e      	movs	r6, r1
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	3642      	adds	r6, #66	; 0x42
 800180e:	1d11      	adds	r1, r2, #4
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	7033      	strb	r3, [r6, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	e079      	b.n	800190e <_printf_i+0x182>
 800181a:	0649      	lsls	r1, r1, #25
 800181c:	d5d9      	bpl.n	80017d2 <_printf_i+0x46>
 800181e:	1d11      	adds	r1, r2, #4
 8001820:	6019      	str	r1, [r3, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	5ed5      	ldrsh	r5, [r2, r3]
 8001826:	2d00      	cmp	r5, #0
 8001828:	da03      	bge.n	8001832 <_printf_i+0xa6>
 800182a:	232d      	movs	r3, #45	; 0x2d
 800182c:	9a04      	ldr	r2, [sp, #16]
 800182e:	426d      	negs	r5, r5
 8001830:	7013      	strb	r3, [r2, #0]
 8001832:	4b62      	ldr	r3, [pc, #392]	; (80019bc <_printf_i+0x230>)
 8001834:	270a      	movs	r7, #10
 8001836:	9303      	str	r3, [sp, #12]
 8001838:	e02f      	b.n	800189a <_printf_i+0x10e>
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	0605      	lsls	r5, r0, #24
 8001840:	d503      	bpl.n	800184a <_printf_i+0xbe>
 8001842:	1d08      	adds	r0, r1, #4
 8001844:	6018      	str	r0, [r3, #0]
 8001846:	680d      	ldr	r5, [r1, #0]
 8001848:	e005      	b.n	8001856 <_printf_i+0xca>
 800184a:	0640      	lsls	r0, r0, #25
 800184c:	d5f9      	bpl.n	8001842 <_printf_i+0xb6>
 800184e:	680d      	ldr	r5, [r1, #0]
 8001850:	1d08      	adds	r0, r1, #4
 8001852:	6018      	str	r0, [r3, #0]
 8001854:	b2ad      	uxth	r5, r5
 8001856:	4b59      	ldr	r3, [pc, #356]	; (80019bc <_printf_i+0x230>)
 8001858:	2708      	movs	r7, #8
 800185a:	9303      	str	r3, [sp, #12]
 800185c:	2a6f      	cmp	r2, #111	; 0x6f
 800185e:	d018      	beq.n	8001892 <_printf_i+0x106>
 8001860:	270a      	movs	r7, #10
 8001862:	e016      	b.n	8001892 <_printf_i+0x106>
 8001864:	3145      	adds	r1, #69	; 0x45
 8001866:	700a      	strb	r2, [r1, #0]
 8001868:	4a54      	ldr	r2, [pc, #336]	; (80019bc <_printf_i+0x230>)
 800186a:	9203      	str	r2, [sp, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	6821      	ldr	r1, [r4, #0]
 8001870:	1d10      	adds	r0, r2, #4
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	6815      	ldr	r5, [r2, #0]
 8001876:	0608      	lsls	r0, r1, #24
 8001878:	d522      	bpl.n	80018c0 <_printf_i+0x134>
 800187a:	07cb      	lsls	r3, r1, #31
 800187c:	d502      	bpl.n	8001884 <_printf_i+0xf8>
 800187e:	2320      	movs	r3, #32
 8001880:	4319      	orrs	r1, r3
 8001882:	6021      	str	r1, [r4, #0]
 8001884:	2710      	movs	r7, #16
 8001886:	2d00      	cmp	r5, #0
 8001888:	d103      	bne.n	8001892 <_printf_i+0x106>
 800188a:	2320      	movs	r3, #32
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	439a      	bics	r2, r3
 8001890:	6022      	str	r2, [r4, #0]
 8001892:	0023      	movs	r3, r4
 8001894:	2200      	movs	r2, #0
 8001896:	3343      	adds	r3, #67	; 0x43
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	60a3      	str	r3, [r4, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db5c      	blt.n	800195c <_printf_i+0x1d0>
 80018a2:	2204      	movs	r2, #4
 80018a4:	6821      	ldr	r1, [r4, #0]
 80018a6:	4391      	bics	r1, r2
 80018a8:	6021      	str	r1, [r4, #0]
 80018aa:	2d00      	cmp	r5, #0
 80018ac:	d158      	bne.n	8001960 <_printf_i+0x1d4>
 80018ae:	9e04      	ldr	r6, [sp, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d064      	beq.n	800197e <_printf_i+0x1f2>
 80018b4:	0026      	movs	r6, r4
 80018b6:	9b03      	ldr	r3, [sp, #12]
 80018b8:	3642      	adds	r6, #66	; 0x42
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	7033      	strb	r3, [r6, #0]
 80018be:	e05e      	b.n	800197e <_printf_i+0x1f2>
 80018c0:	0648      	lsls	r0, r1, #25
 80018c2:	d5da      	bpl.n	800187a <_printf_i+0xee>
 80018c4:	b2ad      	uxth	r5, r5
 80018c6:	e7d8      	b.n	800187a <_printf_i+0xee>
 80018c8:	6809      	ldr	r1, [r1, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	0608      	lsls	r0, r1, #24
 80018ce:	d505      	bpl.n	80018dc <_printf_i+0x150>
 80018d0:	1d11      	adds	r1, r2, #4
 80018d2:	6019      	str	r1, [r3, #0]
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	6962      	ldr	r2, [r4, #20]
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e006      	b.n	80018ea <_printf_i+0x15e>
 80018dc:	0649      	lsls	r1, r1, #25
 80018de:	d5f7      	bpl.n	80018d0 <_printf_i+0x144>
 80018e0:	1d11      	adds	r1, r2, #4
 80018e2:	6019      	str	r1, [r3, #0]
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	8aa2      	ldrh	r2, [r4, #20]
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9e04      	ldr	r6, [sp, #16]
 80018ee:	6123      	str	r3, [r4, #16]
 80018f0:	e054      	b.n	800199c <_printf_i+0x210>
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	1d11      	adds	r1, r2, #4
 80018f6:	6019      	str	r1, [r3, #0]
 80018f8:	6816      	ldr	r6, [r2, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	6862      	ldr	r2, [r4, #4]
 80018fe:	0030      	movs	r0, r6
 8001900:	f000 fae4 	bl	8001ecc <memchr>
 8001904:	2800      	cmp	r0, #0
 8001906:	d001      	beq.n	800190c <_printf_i+0x180>
 8001908:	1b80      	subs	r0, r0, r6
 800190a:	6060      	str	r0, [r4, #4]
 800190c:	6863      	ldr	r3, [r4, #4]
 800190e:	6123      	str	r3, [r4, #16]
 8001910:	2300      	movs	r3, #0
 8001912:	9a04      	ldr	r2, [sp, #16]
 8001914:	7013      	strb	r3, [r2, #0]
 8001916:	e041      	b.n	800199c <_printf_i+0x210>
 8001918:	6923      	ldr	r3, [r4, #16]
 800191a:	0032      	movs	r2, r6
 800191c:	9906      	ldr	r1, [sp, #24]
 800191e:	9805      	ldr	r0, [sp, #20]
 8001920:	9d07      	ldr	r5, [sp, #28]
 8001922:	47a8      	blx	r5
 8001924:	1c43      	adds	r3, r0, #1
 8001926:	d043      	beq.n	80019b0 <_printf_i+0x224>
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	2500      	movs	r5, #0
 800192c:	079b      	lsls	r3, r3, #30
 800192e:	d40f      	bmi.n	8001950 <_printf_i+0x1c4>
 8001930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001932:	68e0      	ldr	r0, [r4, #12]
 8001934:	4298      	cmp	r0, r3
 8001936:	da3d      	bge.n	80019b4 <_printf_i+0x228>
 8001938:	0018      	movs	r0, r3
 800193a:	e03b      	b.n	80019b4 <_printf_i+0x228>
 800193c:	0022      	movs	r2, r4
 800193e:	2301      	movs	r3, #1
 8001940:	3219      	adds	r2, #25
 8001942:	9906      	ldr	r1, [sp, #24]
 8001944:	9805      	ldr	r0, [sp, #20]
 8001946:	9e07      	ldr	r6, [sp, #28]
 8001948:	47b0      	blx	r6
 800194a:	1c43      	adds	r3, r0, #1
 800194c:	d030      	beq.n	80019b0 <_printf_i+0x224>
 800194e:	3501      	adds	r5, #1
 8001950:	68e3      	ldr	r3, [r4, #12]
 8001952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	429d      	cmp	r5, r3
 8001958:	dbf0      	blt.n	800193c <_printf_i+0x1b0>
 800195a:	e7e9      	b.n	8001930 <_printf_i+0x1a4>
 800195c:	2d00      	cmp	r5, #0
 800195e:	d0a9      	beq.n	80018b4 <_printf_i+0x128>
 8001960:	9e04      	ldr	r6, [sp, #16]
 8001962:	0028      	movs	r0, r5
 8001964:	0039      	movs	r1, r7
 8001966:	f7fe fc69 	bl	800023c <__aeabi_uidivmod>
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	3e01      	subs	r6, #1
 800196e:	5c5b      	ldrb	r3, [r3, r1]
 8001970:	0028      	movs	r0, r5
 8001972:	7033      	strb	r3, [r6, #0]
 8001974:	0039      	movs	r1, r7
 8001976:	f7fe fbdb 	bl	8000130 <__udivsi3>
 800197a:	1e05      	subs	r5, r0, #0
 800197c:	d1f1      	bne.n	8001962 <_printf_i+0x1d6>
 800197e:	2f08      	cmp	r7, #8
 8001980:	d109      	bne.n	8001996 <_printf_i+0x20a>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	07db      	lsls	r3, r3, #31
 8001986:	d506      	bpl.n	8001996 <_printf_i+0x20a>
 8001988:	6863      	ldr	r3, [r4, #4]
 800198a:	6922      	ldr	r2, [r4, #16]
 800198c:	4293      	cmp	r3, r2
 800198e:	dc02      	bgt.n	8001996 <_printf_i+0x20a>
 8001990:	2330      	movs	r3, #48	; 0x30
 8001992:	3e01      	subs	r6, #1
 8001994:	7033      	strb	r3, [r6, #0]
 8001996:	9b04      	ldr	r3, [sp, #16]
 8001998:	1b9b      	subs	r3, r3, r6
 800199a:	6123      	str	r3, [r4, #16]
 800199c:	9b07      	ldr	r3, [sp, #28]
 800199e:	aa09      	add	r2, sp, #36	; 0x24
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	0021      	movs	r1, r4
 80019a4:	9b06      	ldr	r3, [sp, #24]
 80019a6:	9805      	ldr	r0, [sp, #20]
 80019a8:	f7ff fe82 	bl	80016b0 <_printf_common>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d1b3      	bne.n	8001918 <_printf_i+0x18c>
 80019b0:	2001      	movs	r0, #1
 80019b2:	4240      	negs	r0, r0
 80019b4:	b00b      	add	sp, #44	; 0x2c
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	080020da 	.word	0x080020da
 80019bc:	080020c9 	.word	0x080020c9

080019c0 <_sbrk_r>:
 80019c0:	2300      	movs	r3, #0
 80019c2:	b570      	push	{r4, r5, r6, lr}
 80019c4:	4c06      	ldr	r4, [pc, #24]	; (80019e0 <_sbrk_r+0x20>)
 80019c6:	0005      	movs	r5, r0
 80019c8:	0008      	movs	r0, r1
 80019ca:	6023      	str	r3, [r4, #0]
 80019cc:	f7fe fc82 	bl	80002d4 <_sbrk>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d103      	bne.n	80019dc <_sbrk_r+0x1c>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d000      	beq.n	80019dc <_sbrk_r+0x1c>
 80019da:	602b      	str	r3, [r5, #0]
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20000108 	.word	0x20000108

080019e4 <__sread>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	000c      	movs	r4, r1
 80019e8:	250e      	movs	r5, #14
 80019ea:	5f49      	ldrsh	r1, [r1, r5]
 80019ec:	f000 fac6 	bl	8001f7c <_read_r>
 80019f0:	2800      	cmp	r0, #0
 80019f2:	db03      	blt.n	80019fc <__sread+0x18>
 80019f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019f6:	181b      	adds	r3, r3, r0
 80019f8:	6563      	str	r3, [r4, #84]	; 0x54
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	89a3      	ldrh	r3, [r4, #12]
 80019fe:	4a02      	ldr	r2, [pc, #8]	; (8001a08 <__sread+0x24>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	81a3      	strh	r3, [r4, #12]
 8001a04:	e7f9      	b.n	80019fa <__sread+0x16>
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	ffffefff 	.word	0xffffefff

08001a0c <__swrite>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	001f      	movs	r7, r3
 8001a10:	898b      	ldrh	r3, [r1, #12]
 8001a12:	0005      	movs	r5, r0
 8001a14:	000c      	movs	r4, r1
 8001a16:	0016      	movs	r6, r2
 8001a18:	05db      	lsls	r3, r3, #23
 8001a1a:	d505      	bpl.n	8001a28 <__swrite+0x1c>
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	5ec9      	ldrsh	r1, [r1, r3]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2302      	movs	r3, #2
 8001a24:	f000 f9d2 	bl	8001dcc <_lseek_r>
 8001a28:	89a3      	ldrh	r3, [r4, #12]
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <__swrite+0x34>)
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	4013      	ands	r3, r2
 8001a30:	81a3      	strh	r3, [r4, #12]
 8001a32:	0032      	movs	r2, r6
 8001a34:	230e      	movs	r3, #14
 8001a36:	5ee1      	ldrsh	r1, [r4, r3]
 8001a38:	003b      	movs	r3, r7
 8001a3a:	f000 f875 	bl	8001b28 <_write_r>
 8001a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a40:	ffffefff 	.word	0xffffefff

08001a44 <__sseek>:
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	000c      	movs	r4, r1
 8001a48:	250e      	movs	r5, #14
 8001a4a:	5f49      	ldrsh	r1, [r1, r5]
 8001a4c:	f000 f9be 	bl	8001dcc <_lseek_r>
 8001a50:	89a3      	ldrh	r3, [r4, #12]
 8001a52:	1c42      	adds	r2, r0, #1
 8001a54:	d103      	bne.n	8001a5e <__sseek+0x1a>
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <__sseek+0x28>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	81a3      	strh	r3, [r4, #12]
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	0152      	lsls	r2, r2, #5
 8001a62:	4313      	orrs	r3, r2
 8001a64:	81a3      	strh	r3, [r4, #12]
 8001a66:	6560      	str	r0, [r4, #84]	; 0x54
 8001a68:	e7f8      	b.n	8001a5c <__sseek+0x18>
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	ffffefff 	.word	0xffffefff

08001a70 <__sclose>:
 8001a70:	b510      	push	{r4, lr}
 8001a72:	230e      	movs	r3, #14
 8001a74:	5ec9      	ldrsh	r1, [r1, r3]
 8001a76:	f000 f8e1 	bl	8001c3c <_close_r>
 8001a7a:	bd10      	pop	{r4, pc}

08001a7c <__swbuf_r>:
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	0005      	movs	r5, r0
 8001a80:	000e      	movs	r6, r1
 8001a82:	0014      	movs	r4, r2
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d004      	beq.n	8001a92 <__swbuf_r+0x16>
 8001a88:	6983      	ldr	r3, [r0, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <__swbuf_r+0x16>
 8001a8e:	f7ff fbd7 	bl	8001240 <__sinit>
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <__swbuf_r+0xa0>)
 8001a94:	429c      	cmp	r4, r3
 8001a96:	d12d      	bne.n	8001af4 <__swbuf_r+0x78>
 8001a98:	686c      	ldr	r4, [r5, #4]
 8001a9a:	69a3      	ldr	r3, [r4, #24]
 8001a9c:	60a3      	str	r3, [r4, #8]
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	071b      	lsls	r3, r3, #28
 8001aa2:	d531      	bpl.n	8001b08 <__swbuf_r+0x8c>
 8001aa4:	6923      	ldr	r3, [r4, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d02e      	beq.n	8001b08 <__swbuf_r+0x8c>
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	6922      	ldr	r2, [r4, #16]
 8001aae:	b2f7      	uxtb	r7, r6
 8001ab0:	1a98      	subs	r0, r3, r2
 8001ab2:	6963      	ldr	r3, [r4, #20]
 8001ab4:	b2f6      	uxtb	r6, r6
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	db05      	blt.n	8001ac6 <__swbuf_r+0x4a>
 8001aba:	0021      	movs	r1, r4
 8001abc:	0028      	movs	r0, r5
 8001abe:	f000 f959 	bl	8001d74 <_fflush_r>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	d126      	bne.n	8001b14 <__swbuf_r+0x98>
 8001ac6:	68a3      	ldr	r3, [r4, #8]
 8001ac8:	3001      	adds	r0, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	60a3      	str	r3, [r4, #8]
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	6022      	str	r2, [r4, #0]
 8001ad4:	701f      	strb	r7, [r3, #0]
 8001ad6:	6963      	ldr	r3, [r4, #20]
 8001ad8:	4298      	cmp	r0, r3
 8001ada:	d004      	beq.n	8001ae6 <__swbuf_r+0x6a>
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	07db      	lsls	r3, r3, #31
 8001ae0:	d51a      	bpl.n	8001b18 <__swbuf_r+0x9c>
 8001ae2:	2e0a      	cmp	r6, #10
 8001ae4:	d118      	bne.n	8001b18 <__swbuf_r+0x9c>
 8001ae6:	0021      	movs	r1, r4
 8001ae8:	0028      	movs	r0, r5
 8001aea:	f000 f943 	bl	8001d74 <_fflush_r>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d012      	beq.n	8001b18 <__swbuf_r+0x9c>
 8001af2:	e00f      	b.n	8001b14 <__swbuf_r+0x98>
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <__swbuf_r+0xa4>)
 8001af6:	429c      	cmp	r4, r3
 8001af8:	d101      	bne.n	8001afe <__swbuf_r+0x82>
 8001afa:	68ac      	ldr	r4, [r5, #8]
 8001afc:	e7cd      	b.n	8001a9a <__swbuf_r+0x1e>
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <__swbuf_r+0xa8>)
 8001b00:	429c      	cmp	r4, r3
 8001b02:	d1ca      	bne.n	8001a9a <__swbuf_r+0x1e>
 8001b04:	68ec      	ldr	r4, [r5, #12]
 8001b06:	e7c8      	b.n	8001a9a <__swbuf_r+0x1e>
 8001b08:	0021      	movs	r1, r4
 8001b0a:	0028      	movs	r0, r5
 8001b0c:	f000 f820 	bl	8001b50 <__swsetup_r>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d0ca      	beq.n	8001aaa <__swbuf_r+0x2e>
 8001b14:	2601      	movs	r6, #1
 8001b16:	4276      	negs	r6, r6
 8001b18:	0030      	movs	r0, r6
 8001b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b1c:	08002078 	.word	0x08002078
 8001b20:	08002098 	.word	0x08002098
 8001b24:	08002058 	.word	0x08002058

08001b28 <_write_r>:
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	0005      	movs	r5, r0
 8001b2c:	0008      	movs	r0, r1
 8001b2e:	0011      	movs	r1, r2
 8001b30:	2200      	movs	r2, #0
 8001b32:	4c06      	ldr	r4, [pc, #24]	; (8001b4c <_write_r+0x24>)
 8001b34:	6022      	str	r2, [r4, #0]
 8001b36:	001a      	movs	r2, r3
 8001b38:	f7fe fbbd 	bl	80002b6 <_write>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d103      	bne.n	8001b48 <_write_r+0x20>
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d000      	beq.n	8001b48 <_write_r+0x20>
 8001b46:	602b      	str	r3, [r5, #0]
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	20000108 	.word	0x20000108

08001b50 <__swsetup_r>:
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <__swsetup_r+0xdc>)
 8001b52:	b570      	push	{r4, r5, r6, lr}
 8001b54:	681d      	ldr	r5, [r3, #0]
 8001b56:	0006      	movs	r6, r0
 8001b58:	000c      	movs	r4, r1
 8001b5a:	2d00      	cmp	r5, #0
 8001b5c:	d005      	beq.n	8001b6a <__swsetup_r+0x1a>
 8001b5e:	69ab      	ldr	r3, [r5, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <__swsetup_r+0x1a>
 8001b64:	0028      	movs	r0, r5
 8001b66:	f7ff fb6b 	bl	8001240 <__sinit>
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <__swsetup_r+0xe0>)
 8001b6c:	429c      	cmp	r4, r3
 8001b6e:	d10f      	bne.n	8001b90 <__swsetup_r+0x40>
 8001b70:	686c      	ldr	r4, [r5, #4]
 8001b72:	230c      	movs	r3, #12
 8001b74:	5ee2      	ldrsh	r2, [r4, r3]
 8001b76:	b293      	uxth	r3, r2
 8001b78:	0719      	lsls	r1, r3, #28
 8001b7a:	d42d      	bmi.n	8001bd8 <__swsetup_r+0x88>
 8001b7c:	06d9      	lsls	r1, r3, #27
 8001b7e:	d411      	bmi.n	8001ba4 <__swsetup_r+0x54>
 8001b80:	2309      	movs	r3, #9
 8001b82:	2001      	movs	r0, #1
 8001b84:	6033      	str	r3, [r6, #0]
 8001b86:	3337      	adds	r3, #55	; 0x37
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	81a3      	strh	r3, [r4, #12]
 8001b8c:	4240      	negs	r0, r0
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <__swsetup_r+0xe4>)
 8001b92:	429c      	cmp	r4, r3
 8001b94:	d101      	bne.n	8001b9a <__swsetup_r+0x4a>
 8001b96:	68ac      	ldr	r4, [r5, #8]
 8001b98:	e7eb      	b.n	8001b72 <__swsetup_r+0x22>
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <__swsetup_r+0xe8>)
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	d1e8      	bne.n	8001b72 <__swsetup_r+0x22>
 8001ba0:	68ec      	ldr	r4, [r5, #12]
 8001ba2:	e7e6      	b.n	8001b72 <__swsetup_r+0x22>
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	d513      	bpl.n	8001bd0 <__swsetup_r+0x80>
 8001ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d008      	beq.n	8001bc0 <__swsetup_r+0x70>
 8001bae:	0023      	movs	r3, r4
 8001bb0:	3344      	adds	r3, #68	; 0x44
 8001bb2:	4299      	cmp	r1, r3
 8001bb4:	d002      	beq.n	8001bbc <__swsetup_r+0x6c>
 8001bb6:	0030      	movs	r0, r6
 8001bb8:	f000 f996 	bl	8001ee8 <_free_r>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6363      	str	r3, [r4, #52]	; 0x34
 8001bc0:	2224      	movs	r2, #36	; 0x24
 8001bc2:	89a3      	ldrh	r3, [r4, #12]
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	81a3      	strh	r3, [r4, #12]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6063      	str	r3, [r4, #4]
 8001bcc:	6923      	ldr	r3, [r4, #16]
 8001bce:	6023      	str	r3, [r4, #0]
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	89a2      	ldrh	r2, [r4, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	81a3      	strh	r3, [r4, #12]
 8001bd8:	6923      	ldr	r3, [r4, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10b      	bne.n	8001bf6 <__swsetup_r+0xa6>
 8001bde:	21a0      	movs	r1, #160	; 0xa0
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	0089      	lsls	r1, r1, #2
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	400b      	ands	r3, r1
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <__swsetup_r+0xa6>
 8001bee:	0021      	movs	r1, r4
 8001bf0:	0030      	movs	r0, r6
 8001bf2:	f000 f927 	bl	8001e44 <__smakebuf_r>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	89a2      	ldrh	r2, [r4, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d011      	beq.n	8001c22 <__swsetup_r+0xd2>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60a3      	str	r3, [r4, #8]
 8001c02:	6963      	ldr	r3, [r4, #20]
 8001c04:	425b      	negs	r3, r3
 8001c06:	61a3      	str	r3, [r4, #24]
 8001c08:	2000      	movs	r0, #0
 8001c0a:	6923      	ldr	r3, [r4, #16]
 8001c0c:	4283      	cmp	r3, r0
 8001c0e:	d1be      	bne.n	8001b8e <__swsetup_r+0x3e>
 8001c10:	230c      	movs	r3, #12
 8001c12:	5ee2      	ldrsh	r2, [r4, r3]
 8001c14:	0613      	lsls	r3, r2, #24
 8001c16:	d5ba      	bpl.n	8001b8e <__swsetup_r+0x3e>
 8001c18:	2340      	movs	r3, #64	; 0x40
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	81a3      	strh	r3, [r4, #12]
 8001c1e:	3801      	subs	r0, #1
 8001c20:	e7b5      	b.n	8001b8e <__swsetup_r+0x3e>
 8001c22:	0792      	lsls	r2, r2, #30
 8001c24:	d400      	bmi.n	8001c28 <__swsetup_r+0xd8>
 8001c26:	6963      	ldr	r3, [r4, #20]
 8001c28:	60a3      	str	r3, [r4, #8]
 8001c2a:	e7ed      	b.n	8001c08 <__swsetup_r+0xb8>
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	08002078 	.word	0x08002078
 8001c34:	08002098 	.word	0x08002098
 8001c38:	08002058 	.word	0x08002058

08001c3c <_close_r>:
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	b570      	push	{r4, r5, r6, lr}
 8001c40:	4c06      	ldr	r4, [pc, #24]	; (8001c5c <_close_r+0x20>)
 8001c42:	0005      	movs	r5, r0
 8001c44:	0008      	movs	r0, r1
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	f7fe fb5e 	bl	8000308 <_close>
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	d103      	bne.n	8001c58 <_close_r+0x1c>
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d000      	beq.n	8001c58 <_close_r+0x1c>
 8001c56:	602b      	str	r3, [r5, #0]
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	20000108 	.word	0x20000108

08001c60 <__sflush_r>:
 8001c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c62:	898a      	ldrh	r2, [r1, #12]
 8001c64:	0005      	movs	r5, r0
 8001c66:	000c      	movs	r4, r1
 8001c68:	0713      	lsls	r3, r2, #28
 8001c6a:	d460      	bmi.n	8001d2e <__sflush_r+0xce>
 8001c6c:	684b      	ldr	r3, [r1, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dc04      	bgt.n	8001c7c <__sflush_r+0x1c>
 8001c72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	dc01      	bgt.n	8001c7c <__sflush_r+0x1c>
 8001c78:	2000      	movs	r0, #0
 8001c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001c7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001c7e:	2f00      	cmp	r7, #0
 8001c80:	d0fa      	beq.n	8001c78 <__sflush_r+0x18>
 8001c82:	2300      	movs	r3, #0
 8001c84:	682e      	ldr	r6, [r5, #0]
 8001c86:	602b      	str	r3, [r5, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	015b      	lsls	r3, r3, #5
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	d034      	beq.n	8001cfa <__sflush_r+0x9a>
 8001c90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c92:	89a3      	ldrh	r3, [r4, #12]
 8001c94:	075b      	lsls	r3, r3, #29
 8001c96:	d506      	bpl.n	8001ca6 <__sflush_r+0x46>
 8001c98:	6863      	ldr	r3, [r4, #4]
 8001c9a:	1ac0      	subs	r0, r0, r3
 8001c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <__sflush_r+0x46>
 8001ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca4:	1ac0      	subs	r0, r0, r3
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	6a21      	ldr	r1, [r4, #32]
 8001caa:	2300      	movs	r3, #0
 8001cac:	0028      	movs	r0, r5
 8001cae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001cb0:	47b8      	blx	r7
 8001cb2:	89a1      	ldrh	r1, [r4, #12]
 8001cb4:	1c43      	adds	r3, r0, #1
 8001cb6:	d106      	bne.n	8001cc6 <__sflush_r+0x66>
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	2b1d      	cmp	r3, #29
 8001cbc:	d831      	bhi.n	8001d22 <__sflush_r+0xc2>
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <__sflush_r+0x110>)
 8001cc0:	40da      	lsrs	r2, r3
 8001cc2:	07d3      	lsls	r3, r2, #31
 8001cc4:	d52d      	bpl.n	8001d22 <__sflush_r+0xc2>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6063      	str	r3, [r4, #4]
 8001cca:	6923      	ldr	r3, [r4, #16]
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	04cb      	lsls	r3, r1, #19
 8001cd0:	d505      	bpl.n	8001cde <__sflush_r+0x7e>
 8001cd2:	1c43      	adds	r3, r0, #1
 8001cd4:	d102      	bne.n	8001cdc <__sflush_r+0x7c>
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d100      	bne.n	8001cde <__sflush_r+0x7e>
 8001cdc:	6560      	str	r0, [r4, #84]	; 0x54
 8001cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ce0:	602e      	str	r6, [r5, #0]
 8001ce2:	2900      	cmp	r1, #0
 8001ce4:	d0c8      	beq.n	8001c78 <__sflush_r+0x18>
 8001ce6:	0023      	movs	r3, r4
 8001ce8:	3344      	adds	r3, #68	; 0x44
 8001cea:	4299      	cmp	r1, r3
 8001cec:	d002      	beq.n	8001cf4 <__sflush_r+0x94>
 8001cee:	0028      	movs	r0, r5
 8001cf0:	f000 f8fa 	bl	8001ee8 <_free_r>
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	6360      	str	r0, [r4, #52]	; 0x34
 8001cf8:	e7bf      	b.n	8001c7a <__sflush_r+0x1a>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	6a21      	ldr	r1, [r4, #32]
 8001cfe:	0028      	movs	r0, r5
 8001d00:	47b8      	blx	r7
 8001d02:	1c43      	adds	r3, r0, #1
 8001d04:	d1c5      	bne.n	8001c92 <__sflush_r+0x32>
 8001d06:	682b      	ldr	r3, [r5, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0c2      	beq.n	8001c92 <__sflush_r+0x32>
 8001d0c:	2b1d      	cmp	r3, #29
 8001d0e:	d001      	beq.n	8001d14 <__sflush_r+0xb4>
 8001d10:	2b16      	cmp	r3, #22
 8001d12:	d101      	bne.n	8001d18 <__sflush_r+0xb8>
 8001d14:	602e      	str	r6, [r5, #0]
 8001d16:	e7af      	b.n	8001c78 <__sflush_r+0x18>
 8001d18:	2340      	movs	r3, #64	; 0x40
 8001d1a:	89a2      	ldrh	r2, [r4, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	81a3      	strh	r3, [r4, #12]
 8001d20:	e7ab      	b.n	8001c7a <__sflush_r+0x1a>
 8001d22:	2340      	movs	r3, #64	; 0x40
 8001d24:	430b      	orrs	r3, r1
 8001d26:	2001      	movs	r0, #1
 8001d28:	81a3      	strh	r3, [r4, #12]
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	e7a5      	b.n	8001c7a <__sflush_r+0x1a>
 8001d2e:	690f      	ldr	r7, [r1, #16]
 8001d30:	2f00      	cmp	r7, #0
 8001d32:	d0a1      	beq.n	8001c78 <__sflush_r+0x18>
 8001d34:	680b      	ldr	r3, [r1, #0]
 8001d36:	600f      	str	r7, [r1, #0]
 8001d38:	1bdb      	subs	r3, r3, r7
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	0792      	lsls	r2, r2, #30
 8001d40:	d100      	bne.n	8001d44 <__sflush_r+0xe4>
 8001d42:	694b      	ldr	r3, [r1, #20]
 8001d44:	60a3      	str	r3, [r4, #8]
 8001d46:	9b01      	ldr	r3, [sp, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	dc00      	bgt.n	8001d4e <__sflush_r+0xee>
 8001d4c:	e794      	b.n	8001c78 <__sflush_r+0x18>
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	003a      	movs	r2, r7
 8001d52:	6a21      	ldr	r1, [r4, #32]
 8001d54:	0028      	movs	r0, r5
 8001d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d58:	47b0      	blx	r6
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	dc03      	bgt.n	8001d66 <__sflush_r+0x106>
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	89a2      	ldrh	r2, [r4, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	e7df      	b.n	8001d26 <__sflush_r+0xc6>
 8001d66:	9b01      	ldr	r3, [sp, #4]
 8001d68:	183f      	adds	r7, r7, r0
 8001d6a:	1a1b      	subs	r3, r3, r0
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	e7ea      	b.n	8001d46 <__sflush_r+0xe6>
 8001d70:	20400001 	.word	0x20400001

08001d74 <_fflush_r>:
 8001d74:	690b      	ldr	r3, [r1, #16]
 8001d76:	b570      	push	{r4, r5, r6, lr}
 8001d78:	0005      	movs	r5, r0
 8001d7a:	000c      	movs	r4, r1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <_fflush_r+0x10>
 8001d80:	2000      	movs	r0, #0
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d004      	beq.n	8001d92 <_fflush_r+0x1e>
 8001d88:	6983      	ldr	r3, [r0, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <_fflush_r+0x1e>
 8001d8e:	f7ff fa57 	bl	8001240 <__sinit>
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <_fflush_r+0x4c>)
 8001d94:	429c      	cmp	r4, r3
 8001d96:	d109      	bne.n	8001dac <_fflush_r+0x38>
 8001d98:	686c      	ldr	r4, [r5, #4]
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	5ea3      	ldrsh	r3, [r4, r2]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0ee      	beq.n	8001d80 <_fflush_r+0xc>
 8001da2:	0021      	movs	r1, r4
 8001da4:	0028      	movs	r0, r5
 8001da6:	f7ff ff5b 	bl	8001c60 <__sflush_r>
 8001daa:	e7ea      	b.n	8001d82 <_fflush_r+0xe>
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_fflush_r+0x50>)
 8001dae:	429c      	cmp	r4, r3
 8001db0:	d101      	bne.n	8001db6 <_fflush_r+0x42>
 8001db2:	68ac      	ldr	r4, [r5, #8]
 8001db4:	e7f1      	b.n	8001d9a <_fflush_r+0x26>
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <_fflush_r+0x54>)
 8001db8:	429c      	cmp	r4, r3
 8001dba:	d1ee      	bne.n	8001d9a <_fflush_r+0x26>
 8001dbc:	68ec      	ldr	r4, [r5, #12]
 8001dbe:	e7ec      	b.n	8001d9a <_fflush_r+0x26>
 8001dc0:	08002078 	.word	0x08002078
 8001dc4:	08002098 	.word	0x08002098
 8001dc8:	08002058 	.word	0x08002058

08001dcc <_lseek_r>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	0005      	movs	r5, r0
 8001dd0:	0008      	movs	r0, r1
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4c06      	ldr	r4, [pc, #24]	; (8001df0 <_lseek_r+0x24>)
 8001dd8:	6022      	str	r2, [r4, #0]
 8001dda:	001a      	movs	r2, r3
 8001ddc:	f7fe fa9e 	bl	800031c <_lseek>
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	d103      	bne.n	8001dec <_lseek_r+0x20>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d000      	beq.n	8001dec <_lseek_r+0x20>
 8001dea:	602b      	str	r3, [r5, #0]
 8001dec:	bd70      	pop	{r4, r5, r6, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	20000108 	.word	0x20000108

08001df4 <__swhatbuf_r>:
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	000e      	movs	r6, r1
 8001df8:	001d      	movs	r5, r3
 8001dfa:	230e      	movs	r3, #14
 8001dfc:	5ec9      	ldrsh	r1, [r1, r3]
 8001dfe:	b090      	sub	sp, #64	; 0x40
 8001e00:	0014      	movs	r4, r2
 8001e02:	2900      	cmp	r1, #0
 8001e04:	da07      	bge.n	8001e16 <__swhatbuf_r+0x22>
 8001e06:	2300      	movs	r3, #0
 8001e08:	602b      	str	r3, [r5, #0]
 8001e0a:	89b3      	ldrh	r3, [r6, #12]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	d411      	bmi.n	8001e34 <__swhatbuf_r+0x40>
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	e00f      	b.n	8001e36 <__swhatbuf_r+0x42>
 8001e16:	aa01      	add	r2, sp, #4
 8001e18:	f000 f8c4 	bl	8001fa4 <_fstat_r>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	dbf2      	blt.n	8001e06 <__swhatbuf_r+0x12>
 8001e20:	22f0      	movs	r2, #240	; 0xf0
 8001e22:	9b02      	ldr	r3, [sp, #8]
 8001e24:	0212      	lsls	r2, r2, #8
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <__swhatbuf_r+0x4c>)
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	425a      	negs	r2, r3
 8001e2e:	4153      	adcs	r3, r2
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	e7ed      	b.n	8001e10 <__swhatbuf_r+0x1c>
 8001e34:	2340      	movs	r3, #64	; 0x40
 8001e36:	2000      	movs	r0, #0
 8001e38:	6023      	str	r3, [r4, #0]
 8001e3a:	b010      	add	sp, #64	; 0x40
 8001e3c:	bd70      	pop	{r4, r5, r6, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	ffffe000 	.word	0xffffe000

08001e44 <__smakebuf_r>:
 8001e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e46:	2602      	movs	r6, #2
 8001e48:	898b      	ldrh	r3, [r1, #12]
 8001e4a:	0005      	movs	r5, r0
 8001e4c:	000c      	movs	r4, r1
 8001e4e:	4233      	tst	r3, r6
 8001e50:	d006      	beq.n	8001e60 <__smakebuf_r+0x1c>
 8001e52:	0023      	movs	r3, r4
 8001e54:	3347      	adds	r3, #71	; 0x47
 8001e56:	6023      	str	r3, [r4, #0]
 8001e58:	6123      	str	r3, [r4, #16]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	6163      	str	r3, [r4, #20]
 8001e5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001e60:	ab01      	add	r3, sp, #4
 8001e62:	466a      	mov	r2, sp
 8001e64:	f7ff ffc6 	bl	8001df4 <__swhatbuf_r>
 8001e68:	9900      	ldr	r1, [sp, #0]
 8001e6a:	0007      	movs	r7, r0
 8001e6c:	0028      	movs	r0, r5
 8001e6e:	f7ff fa7d 	bl	800136c <_malloc_r>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d108      	bne.n	8001e88 <__smakebuf_r+0x44>
 8001e76:	220c      	movs	r2, #12
 8001e78:	5ea3      	ldrsh	r3, [r4, r2]
 8001e7a:	059a      	lsls	r2, r3, #22
 8001e7c:	d4ef      	bmi.n	8001e5e <__smakebuf_r+0x1a>
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4393      	bics	r3, r2
 8001e82:	431e      	orrs	r6, r3
 8001e84:	81a6      	strh	r6, [r4, #12]
 8001e86:	e7e4      	b.n	8001e52 <__smakebuf_r+0xe>
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <__smakebuf_r+0x84>)
 8001e8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	89a2      	ldrh	r2, [r4, #12]
 8001e90:	6020      	str	r0, [r4, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	81a3      	strh	r3, [r4, #12]
 8001e96:	9b00      	ldr	r3, [sp, #0]
 8001e98:	6120      	str	r0, [r4, #16]
 8001e9a:	6163      	str	r3, [r4, #20]
 8001e9c:	9b01      	ldr	r3, [sp, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <__smakebuf_r+0x7a>
 8001ea2:	230e      	movs	r3, #14
 8001ea4:	5ee1      	ldrsh	r1, [r4, r3]
 8001ea6:	0028      	movs	r0, r5
 8001ea8:	f000 f88e 	bl	8001fc8 <_isatty_r>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d006      	beq.n	8001ebe <__smakebuf_r+0x7a>
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	89a3      	ldrh	r3, [r4, #12]
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	81a3      	strh	r3, [r4, #12]
 8001ebe:	89a0      	ldrh	r0, [r4, #12]
 8001ec0:	4338      	orrs	r0, r7
 8001ec2:	81a0      	strh	r0, [r4, #12]
 8001ec4:	e7cb      	b.n	8001e5e <__smakebuf_r+0x1a>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	080011bd 	.word	0x080011bd

08001ecc <memchr>:
 8001ecc:	b2c9      	uxtb	r1, r1
 8001ece:	1882      	adds	r2, r0, r2
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d101      	bne.n	8001ed8 <memchr+0xc>
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	4770      	bx	lr
 8001ed8:	7803      	ldrb	r3, [r0, #0]
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d0fb      	beq.n	8001ed6 <memchr+0xa>
 8001ede:	3001      	adds	r0, #1
 8001ee0:	e7f6      	b.n	8001ed0 <memchr+0x4>

08001ee2 <__malloc_lock>:
 8001ee2:	4770      	bx	lr

08001ee4 <__malloc_unlock>:
 8001ee4:	4770      	bx	lr
	...

08001ee8 <_free_r>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	0005      	movs	r5, r0
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d010      	beq.n	8001f12 <_free_r+0x2a>
 8001ef0:	1f0c      	subs	r4, r1, #4
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da00      	bge.n	8001efa <_free_r+0x12>
 8001ef8:	18e4      	adds	r4, r4, r3
 8001efa:	0028      	movs	r0, r5
 8001efc:	f7ff fff1 	bl	8001ee2 <__malloc_lock>
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <_free_r+0x90>)
 8001f02:	6813      	ldr	r3, [r2, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <_free_r+0x2c>
 8001f08:	6063      	str	r3, [r4, #4]
 8001f0a:	6014      	str	r4, [r2, #0]
 8001f0c:	0028      	movs	r0, r5
 8001f0e:	f7ff ffe9 	bl	8001ee4 <__malloc_unlock>
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	42a3      	cmp	r3, r4
 8001f16:	d909      	bls.n	8001f2c <_free_r+0x44>
 8001f18:	6821      	ldr	r1, [r4, #0]
 8001f1a:	1860      	adds	r0, r4, r1
 8001f1c:	4283      	cmp	r3, r0
 8001f1e:	d1f3      	bne.n	8001f08 <_free_r+0x20>
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	1841      	adds	r1, r0, r1
 8001f26:	6021      	str	r1, [r4, #0]
 8001f28:	e7ee      	b.n	8001f08 <_free_r+0x20>
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d001      	beq.n	8001f36 <_free_r+0x4e>
 8001f32:	42a2      	cmp	r2, r4
 8001f34:	d9f9      	bls.n	8001f2a <_free_r+0x42>
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	1858      	adds	r0, r3, r1
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d10b      	bne.n	8001f56 <_free_r+0x6e>
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	1809      	adds	r1, r1, r0
 8001f42:	1858      	adds	r0, r3, r1
 8001f44:	6019      	str	r1, [r3, #0]
 8001f46:	4282      	cmp	r2, r0
 8001f48:	d1e0      	bne.n	8001f0c <_free_r+0x24>
 8001f4a:	6810      	ldr	r0, [r2, #0]
 8001f4c:	6852      	ldr	r2, [r2, #4]
 8001f4e:	1841      	adds	r1, r0, r1
 8001f50:	6019      	str	r1, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e7da      	b.n	8001f0c <_free_r+0x24>
 8001f56:	42a0      	cmp	r0, r4
 8001f58:	d902      	bls.n	8001f60 <_free_r+0x78>
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	602b      	str	r3, [r5, #0]
 8001f5e:	e7d5      	b.n	8001f0c <_free_r+0x24>
 8001f60:	6821      	ldr	r1, [r4, #0]
 8001f62:	1860      	adds	r0, r4, r1
 8001f64:	4282      	cmp	r2, r0
 8001f66:	d103      	bne.n	8001f70 <_free_r+0x88>
 8001f68:	6810      	ldr	r0, [r2, #0]
 8001f6a:	6852      	ldr	r2, [r2, #4]
 8001f6c:	1841      	adds	r1, r0, r1
 8001f6e:	6021      	str	r1, [r4, #0]
 8001f70:	6062      	str	r2, [r4, #4]
 8001f72:	605c      	str	r4, [r3, #4]
 8001f74:	e7ca      	b.n	8001f0c <_free_r+0x24>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	20000088 	.word	0x20000088

08001f7c <_read_r>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	0005      	movs	r5, r0
 8001f80:	0008      	movs	r0, r1
 8001f82:	0011      	movs	r1, r2
 8001f84:	2200      	movs	r2, #0
 8001f86:	4c06      	ldr	r4, [pc, #24]	; (8001fa0 <_read_r+0x24>)
 8001f88:	6022      	str	r2, [r4, #0]
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	f7fe f985 	bl	800029a <_read>
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	d103      	bne.n	8001f9c <_read_r+0x20>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d000      	beq.n	8001f9c <_read_r+0x20>
 8001f9a:	602b      	str	r3, [r5, #0]
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	20000108 	.word	0x20000108

08001fa4 <_fstat_r>:
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	b570      	push	{r4, r5, r6, lr}
 8001fa8:	4c06      	ldr	r4, [pc, #24]	; (8001fc4 <_fstat_r+0x20>)
 8001faa:	0005      	movs	r5, r0
 8001fac:	0008      	movs	r0, r1
 8001fae:	0011      	movs	r1, r2
 8001fb0:	6023      	str	r3, [r4, #0]
 8001fb2:	f7fe f9ac 	bl	800030e <_fstat>
 8001fb6:	1c43      	adds	r3, r0, #1
 8001fb8:	d103      	bne.n	8001fc2 <_fstat_r+0x1e>
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d000      	beq.n	8001fc2 <_fstat_r+0x1e>
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	20000108 	.word	0x20000108

08001fc8 <_isatty_r>:
 8001fc8:	2300      	movs	r3, #0
 8001fca:	b570      	push	{r4, r5, r6, lr}
 8001fcc:	4c06      	ldr	r4, [pc, #24]	; (8001fe8 <_isatty_r+0x20>)
 8001fce:	0005      	movs	r5, r0
 8001fd0:	0008      	movs	r0, r1
 8001fd2:	6023      	str	r3, [r4, #0]
 8001fd4:	f7fe f9a0 	bl	8000318 <_isatty>
 8001fd8:	1c43      	adds	r3, r0, #1
 8001fda:	d103      	bne.n	8001fe4 <_isatty_r+0x1c>
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d000      	beq.n	8001fe4 <_isatty_r+0x1c>
 8001fe2:	602b      	str	r3, [r5, #0]
 8001fe4:	bd70      	pop	{r4, r5, r6, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	20000108 	.word	0x20000108

08001fec <_init>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr

08001ff8 <_fini>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffe:	bc08      	pop	{r3}
 8002000:	469e      	mov	lr, r3
 8002002:	4770      	bx	lr
